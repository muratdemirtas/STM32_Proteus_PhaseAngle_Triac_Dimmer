
triyk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045b0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080046bc  080046bc  000056bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047b4  080047b4  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  080047b4  080047b4  000057b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047bc  080047bc  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047bc  080047bc  000057bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047c0  080047c0  000057c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080047c4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  2000005c  08004820  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08004820  0000633c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d31d  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f57  00000000  00000000  000133a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  00015300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a48  00000000  00000000  00016020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017889  00000000  00000000  00016a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e963  00000000  00000000  0002e2f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d840  00000000  00000000  0003cc54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ca494  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c00  00000000  00000000  000ca4d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000ce0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080046a4 	.word	0x080046a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080046a4 	.word	0x080046a4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <Determine_PhaseTimerValue>:
/* USER CODE BEGIN PFP */
uint32_t angleLevel = 0;
int32_t angleTimerValue = 0;
int32_t olcAngleTimerValue = 0;
int32_t Determine_PhaseTimerValue(int32_t x, int32_t in_min,
						int32_t in_max, int32_t out_min, int32_t out_max) {
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	607a      	str	r2, [r7, #4]
 8000168:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800016a:	68fa      	ldr	r2, [r7, #12]
 800016c:	68bb      	ldr	r3, [r7, #8]
 800016e:	1ad3      	subs	r3, r2, r3
 8000170:	69b9      	ldr	r1, [r7, #24]
 8000172:	683a      	ldr	r2, [r7, #0]
 8000174:	1a8a      	subs	r2, r1, r2
 8000176:	fb03 f202 	mul.w	r2, r3, r2
 800017a:	6879      	ldr	r1, [r7, #4]
 800017c:	68bb      	ldr	r3, [r7, #8]
 800017e:	1acb      	subs	r3, r1, r3
 8000180:	fb92 f2f3 	sdiv	r2, r2, r3
 8000184:	683b      	ldr	r3, [r7, #0]
 8000186:	4413      	add	r3, r2
}
 8000188:	4618      	mov	r0, r3
 800018a:	3714      	adds	r7, #20
 800018c:	46bd      	mov	sp, r7
 800018e:	bc80      	pop	{r7}
 8000190:	4770      	bx	lr

08000192 <Determine_PWMLevel>:

uint32_t Determine_PWMLevel(uint32_t adcVal){
 8000192:	b480      	push	{r7}
 8000194:	b085      	sub	sp, #20
 8000196:	af00      	add	r7, sp, #0
 8000198:	6078      	str	r0, [r7, #4]
	uint32_t level = 0;
 800019a:	2300      	movs	r3, #0
 800019c:	60fb      	str	r3, [r7, #12]
	if(adcVal >= 0 && adcVal < 200){
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	2bc7      	cmp	r3, #199	@ 0xc7
 80001a2:	d802      	bhi.n	80001aa <Determine_PWMLevel+0x18>
		level = 0;
 80001a4:	2300      	movs	r3, #0
 80001a6:	60fb      	str	r3, [r7, #12]
 80001a8:	e063      	b.n	8000272 <Determine_PWMLevel+0xe0>
	}
	else if(adcVal >= 200 && adcVal < 400){
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	2bc7      	cmp	r3, #199	@ 0xc7
 80001ae:	d906      	bls.n	80001be <Determine_PWMLevel+0x2c>
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80001b6:	d202      	bcs.n	80001be <Determine_PWMLevel+0x2c>
		level = 10;
 80001b8:	230a      	movs	r3, #10
 80001ba:	60fb      	str	r3, [r7, #12]
 80001bc:	e059      	b.n	8000272 <Determine_PWMLevel+0xe0>
	}
	else if(adcVal >= 400 && adcVal < 800){
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80001c4:	d306      	bcc.n	80001d4 <Determine_PWMLevel+0x42>
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 80001cc:	d202      	bcs.n	80001d4 <Determine_PWMLevel+0x42>
		level = 20;
 80001ce:	2314      	movs	r3, #20
 80001d0:	60fb      	str	r3, [r7, #12]
 80001d2:	e04e      	b.n	8000272 <Determine_PWMLevel+0xe0>
	}
	else if(adcVal >= 800 && adcVal < 1200){
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 80001da:	d306      	bcc.n	80001ea <Determine_PWMLevel+0x58>
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80001e2:	d202      	bcs.n	80001ea <Determine_PWMLevel+0x58>
		level = 30;
 80001e4:	231e      	movs	r3, #30
 80001e6:	60fb      	str	r3, [r7, #12]
 80001e8:	e043      	b.n	8000272 <Determine_PWMLevel+0xe0>
	}
	else if(adcVal >= 1200 && adcVal < 1600){
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80001f0:	d306      	bcc.n	8000200 <Determine_PWMLevel+0x6e>
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80001f8:	d202      	bcs.n	8000200 <Determine_PWMLevel+0x6e>
		level = 40;
 80001fa:	2328      	movs	r3, #40	@ 0x28
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	e038      	b.n	8000272 <Determine_PWMLevel+0xe0>
	}
	else if(adcVal >= 1600 && adcVal < 2000){
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8000206:	d306      	bcc.n	8000216 <Determine_PWMLevel+0x84>
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800020e:	d202      	bcs.n	8000216 <Determine_PWMLevel+0x84>
		level = 50;
 8000210:	2332      	movs	r3, #50	@ 0x32
 8000212:	60fb      	str	r3, [r7, #12]
 8000214:	e02d      	b.n	8000272 <Determine_PWMLevel+0xe0>
	}
	else if(adcVal >= 2000 && adcVal < 2400){
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800021c:	d306      	bcc.n	800022c <Determine_PWMLevel+0x9a>
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f5b3 6f16 	cmp.w	r3, #2400	@ 0x960
 8000224:	d202      	bcs.n	800022c <Determine_PWMLevel+0x9a>
		level = 60;
 8000226:	233c      	movs	r3, #60	@ 0x3c
 8000228:	60fb      	str	r3, [r7, #12]
 800022a:	e022      	b.n	8000272 <Determine_PWMLevel+0xe0>
	}
	else  if(adcVal >= 2400 && adcVal < 2800){
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f5b3 6f16 	cmp.w	r3, #2400	@ 0x960
 8000232:	d306      	bcc.n	8000242 <Determine_PWMLevel+0xb0>
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 800023a:	d202      	bcs.n	8000242 <Determine_PWMLevel+0xb0>
		level = 70;
 800023c:	2346      	movs	r3, #70	@ 0x46
 800023e:	60fb      	str	r3, [r7, #12]
 8000240:	e017      	b.n	8000272 <Determine_PWMLevel+0xe0>
	}
	else  if(adcVal >= 3200 && adcVal < 3600){
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f5b3 6f48 	cmp.w	r3, #3200	@ 0xc80
 8000248:	d306      	bcc.n	8000258 <Determine_PWMLevel+0xc6>
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8000250:	d202      	bcs.n	8000258 <Determine_PWMLevel+0xc6>
		level = 80;
 8000252:	2350      	movs	r3, #80	@ 0x50
 8000254:	60fb      	str	r3, [r7, #12]
 8000256:	e00c      	b.n	8000272 <Determine_PWMLevel+0xe0>
	}
	else  if(adcVal >= 3600 && adcVal < 4000){
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 800025e:	d306      	bcc.n	800026e <Determine_PWMLevel+0xdc>
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8000266:	d202      	bcs.n	800026e <Determine_PWMLevel+0xdc>
		level = 90;
 8000268:	235a      	movs	r3, #90	@ 0x5a
 800026a:	60fb      	str	r3, [r7, #12]
 800026c:	e001      	b.n	8000272 <Determine_PWMLevel+0xe0>
	}else{
		level = 100;
 800026e:	2364      	movs	r3, #100	@ 0x64
 8000270:	60fb      	str	r3, [r7, #12]
	}

	return level;
 8000272:	68fb      	ldr	r3, [r7, #12]
}
 8000274:	4618      	mov	r0, r3
 8000276:	3714      	adds	r7, #20
 8000278:	46bd      	mov	sp, r7
 800027a:	bc80      	pop	{r7}
 800027c:	4770      	bx	lr
	...

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b092      	sub	sp, #72	@ 0x48
 8000284:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 fe55 	bl	8000f34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f911 	bl	80004b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 fae5 	bl	800085c <MX_GPIO_Init>
  MX_TIM3_Init();
 8000292:	f000 f9eb 	bl	800066c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000296:	f000 fa39 	bl	800070c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800029a:	f000 fab5 	bl	8000808 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800029e:	f000 f995 	bl	80005cc <MX_TIM1_Init>
  MX_ADC1_Init();
 80002a2:	f000 f955 	bl	8000550 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  MX_ADC1_Init();
 80002a6:	f000 f953 	bl	8000550 <MX_ADC1_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 80002aa:	4872      	ldr	r0, [pc, #456]	@ (8000474 <main+0x1f4>)
 80002ac:	f002 fbcc 	bl	8002a48 <HAL_TIM_Base_Start_IT>
  uint8_t msg[50];
  uint32_t adcSum = 0, adcVal = 0;
 80002b0:	2300      	movs	r3, #0
 80002b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80002b4:	2300      	movs	r3, #0
 80002b6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(printflag){
 80002b8:	4b6f      	ldr	r3, [pc, #444]	@ (8000478 <main+0x1f8>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	b2db      	uxtb	r3, r3
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d067      	beq.n	8000392 <main+0x112>
	  memset(msg, 0, sizeof(msg));
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	2232      	movs	r2, #50	@ 0x32
 80002c6:	2100      	movs	r1, #0
 80002c8:	4618      	mov	r0, r3
 80002ca:	f003 fd5b 	bl	8003d84 <memset>

	  if(!frequencyCalculated){
 80002ce:	4b6b      	ldr	r3, [pc, #428]	@ (800047c <main+0x1fc>)
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	f083 0301 	eor.w	r3, r3, #1
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d015      	beq.n	8000308 <main+0x88>
		  if(frequencyReceived >= 40 && frequencyReceived <=70){
 80002dc:	4b68      	ldr	r3, [pc, #416]	@ (8000480 <main+0x200>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	2b27      	cmp	r3, #39	@ 0x27
 80002e2:	d911      	bls.n	8000308 <main+0x88>
 80002e4:	4b66      	ldr	r3, [pc, #408]	@ (8000480 <main+0x200>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	2b46      	cmp	r3, #70	@ 0x46
 80002ea:	d80d      	bhi.n	8000308 <main+0x88>
			  if(frequencyReceived < 60){
 80002ec:	4b64      	ldr	r3, [pc, #400]	@ (8000480 <main+0x200>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	2b3b      	cmp	r3, #59	@ 0x3b
 80002f2:	d803      	bhi.n	80002fc <main+0x7c>
				  frequencyDetected = 50;
 80002f4:	4b63      	ldr	r3, [pc, #396]	@ (8000484 <main+0x204>)
 80002f6:	2232      	movs	r2, #50	@ 0x32
 80002f8:	701a      	strb	r2, [r3, #0]
 80002fa:	e002      	b.n	8000302 <main+0x82>
			  }else{
				  frequencyDetected = 60;
 80002fc:	4b61      	ldr	r3, [pc, #388]	@ (8000484 <main+0x204>)
 80002fe:	223c      	movs	r2, #60	@ 0x3c
 8000300:	701a      	strb	r2, [r3, #0]
			  }
			  frequencyCalculated = true;
 8000302:	4b5e      	ldr	r3, [pc, #376]	@ (800047c <main+0x1fc>)
 8000304:	2201      	movs	r2, #1
 8000306:	701a      	strb	r2, [r3, #0]
		  }

	  }

	  if(frequencyCalculated){
 8000308:	4b5c      	ldr	r3, [pc, #368]	@ (800047c <main+0x1fc>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d022      	beq.n	8000356 <main+0xd6>
		  sprintf(msg, "Freq: %d, ADC: %d, Angle: %%%d, T3 Timer %d\r\n",
 8000310:	4b5c      	ldr	r3, [pc, #368]	@ (8000484 <main+0x204>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	4619      	mov	r1, r3
 8000316:	4b5c      	ldr	r3, [pc, #368]	@ (8000488 <main+0x208>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 800031e:	4a5b      	ldr	r2, [pc, #364]	@ (800048c <main+0x20c>)
 8000320:	6812      	ldr	r2, [r2, #0]
 8000322:	1d38      	adds	r0, r7, #4
 8000324:	9201      	str	r2, [sp, #4]
 8000326:	9300      	str	r3, [sp, #0]
 8000328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800032a:	460a      	mov	r2, r1
 800032c:	4958      	ldr	r1, [pc, #352]	@ (8000490 <main+0x210>)
 800032e:	f003 fd09 	bl	8003d44 <siprintf>
				  	  	  	  	  	  frequencyDetected, adcVal, 100 - angleLevel, angleTimerValue);
		  HAL_UART_Transmit(&huart1, msg, strlen(msg), 100);
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	4618      	mov	r0, r3
 8000336:	f7ff ff09 	bl	800014c <strlen>
 800033a:	4603      	mov	r3, r0
 800033c:	b29a      	uxth	r2, r3
 800033e:	1d39      	adds	r1, r7, #4
 8000340:	2364      	movs	r3, #100	@ 0x64
 8000342:	4854      	ldr	r0, [pc, #336]	@ (8000494 <main+0x214>)
 8000344:	f003 fb2a 	bl	800399c <HAL_UART_Transmit>
		  printflag = false;
 8000348:	4b4b      	ldr	r3, [pc, #300]	@ (8000478 <main+0x1f8>)
 800034a:	2200      	movs	r2, #0
 800034c:	701a      	strb	r2, [r3, #0]
		  frequencyReceived = 0;
 800034e:	4b4c      	ldr	r3, [pc, #304]	@ (8000480 <main+0x200>)
 8000350:	2200      	movs	r2, #0
 8000352:	601a      	str	r2, [r3, #0]
 8000354:	e01d      	b.n	8000392 <main+0x112>
	  }else{
		  sprintf(msg, "Frequency ERROR,ADC: %d, Angle: %%%d, T3 Timer %d\r\n", adcVal, 100 - angleLevel,angleTimerValue);
 8000356:	4b4c      	ldr	r3, [pc, #304]	@ (8000488 <main+0x208>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	f1c3 0264 	rsb	r2, r3, #100	@ 0x64
 800035e:	4b4b      	ldr	r3, [pc, #300]	@ (800048c <main+0x20c>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	1d38      	adds	r0, r7, #4
 8000364:	9300      	str	r3, [sp, #0]
 8000366:	4613      	mov	r3, r2
 8000368:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800036a:	494b      	ldr	r1, [pc, #300]	@ (8000498 <main+0x218>)
 800036c:	f003 fcea 	bl	8003d44 <siprintf>
		  HAL_UART_Transmit(&huart1, msg, strlen(msg), 100);
 8000370:	1d3b      	adds	r3, r7, #4
 8000372:	4618      	mov	r0, r3
 8000374:	f7ff feea 	bl	800014c <strlen>
 8000378:	4603      	mov	r3, r0
 800037a:	b29a      	uxth	r2, r3
 800037c:	1d39      	adds	r1, r7, #4
 800037e:	2364      	movs	r3, #100	@ 0x64
 8000380:	4844      	ldr	r0, [pc, #272]	@ (8000494 <main+0x214>)
 8000382:	f003 fb0b 	bl	800399c <HAL_UART_Transmit>
		  printflag = false;
 8000386:	4b3c      	ldr	r3, [pc, #240]	@ (8000478 <main+0x1f8>)
 8000388:	2200      	movs	r2, #0
 800038a:	701a      	strb	r2, [r3, #0]
		  frequencyReceived = 0;
 800038c:	4b3c      	ldr	r3, [pc, #240]	@ (8000480 <main+0x200>)
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]




  }
  for(uint8_t i = 0; i < 10; i++){
 8000392:	2300      	movs	r3, #0
 8000394:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000398:	e016      	b.n	80003c8 <main+0x148>
	  HAL_ADC_Start(&hadc1);
 800039a:	4840      	ldr	r0, [pc, #256]	@ (800049c <main+0x21c>)
 800039c:	f000 ff28 	bl	80011f0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10000);
 80003a0:	f242 7110 	movw	r1, #10000	@ 0x2710
 80003a4:	483d      	ldr	r0, [pc, #244]	@ (800049c <main+0x21c>)
 80003a6:	f000 ffd1 	bl	800134c <HAL_ADC_PollForConversion>
	  adcSum +=  HAL_ADC_GetValue(&hadc1);
 80003aa:	483c      	ldr	r0, [pc, #240]	@ (800049c <main+0x21c>)
 80003ac:	f001 f8d4 	bl	8001558 <HAL_ADC_GetValue>
 80003b0:	4602      	mov	r2, r0
 80003b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80003b4:	4413      	add	r3, r2
 80003b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  HAL_Delay(10);
 80003b8:	200a      	movs	r0, #10
 80003ba:	f000 fe1d 	bl	8000ff8 <HAL_Delay>
  for(uint8_t i = 0; i < 10; i++){
 80003be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80003c2:	3301      	adds	r3, #1
 80003c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80003c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80003cc:	2b09      	cmp	r3, #9
 80003ce:	d9e4      	bls.n	800039a <main+0x11a>
  }
  adcVal = adcSum / 10;
 80003d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80003d2:	4a33      	ldr	r2, [pc, #204]	@ (80004a0 <main+0x220>)
 80003d4:	fba2 2303 	umull	r2, r3, r2, r3
 80003d8:	08db      	lsrs	r3, r3, #3
 80003da:	63bb      	str	r3, [r7, #56]	@ 0x38
  adcSum = 0;
 80003dc:	2300      	movs	r3, #0
 80003de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  angleLevel = Determine_PWMLevel(adcVal);
 80003e0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80003e2:	f7ff fed6 	bl	8000192 <Determine_PWMLevel>
 80003e6:	4603      	mov	r3, r0
 80003e8:	4a27      	ldr	r2, [pc, #156]	@ (8000488 <main+0x208>)
 80003ea:	6013      	str	r3, [r2, #0]
  angleLevel = 100 - angleLevel;
 80003ec:	4b26      	ldr	r3, [pc, #152]	@ (8000488 <main+0x208>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80003f4:	4a24      	ldr	r2, [pc, #144]	@ (8000488 <main+0x208>)
 80003f6:	6013      	str	r3, [r2, #0]



  if(angleLevel >= 100){
 80003f8:	4b23      	ldr	r3, [pc, #140]	@ (8000488 <main+0x208>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	2b63      	cmp	r3, #99	@ 0x63
 80003fe:	d903      	bls.n	8000408 <main+0x188>
	  angleTimerValue = 0;
 8000400:	4b22      	ldr	r3, [pc, #136]	@ (800048c <main+0x20c>)
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
 8000406:	e00e      	b.n	8000426 <main+0x1a6>

  }else{
	  angleTimerValue = Determine_PhaseTimerValue(angleLevel,0, 100, 500, 1000);
 8000408:	4b1f      	ldr	r3, [pc, #124]	@ (8000488 <main+0x208>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4618      	mov	r0, r3
 800040e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000412:	9300      	str	r3, [sp, #0]
 8000414:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000418:	2264      	movs	r2, #100	@ 0x64
 800041a:	2100      	movs	r1, #0
 800041c:	f7ff fe9e 	bl	800015c <Determine_PhaseTimerValue>
 8000420:	4603      	mov	r3, r0
 8000422:	4a1a      	ldr	r2, [pc, #104]	@ (800048c <main+0x20c>)
 8000424:	6013      	str	r3, [r2, #0]
  }


  if(angleTimerValue < 0){
 8000426:	4b19      	ldr	r3, [pc, #100]	@ (800048c <main+0x20c>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	2b00      	cmp	r3, #0
 800042c:	da02      	bge.n	8000434 <main+0x1b4>
	  angleTimerValue = 0;
 800042e:	4b17      	ldr	r3, [pc, #92]	@ (800048c <main+0x20c>)
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
  }

  if(olcAngleTimerValue != angleTimerValue){
 8000434:	4b1b      	ldr	r3, [pc, #108]	@ (80004a4 <main+0x224>)
 8000436:	681a      	ldr	r2, [r3, #0]
 8000438:	4b14      	ldr	r3, [pc, #80]	@ (800048c <main+0x20c>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	429a      	cmp	r2, r3
 800043e:	f43f af3b 	beq.w	80002b8 <main+0x38>
	  __HAL_TIM_SET_COUNTER(&htim3, 0);
 8000442:	4b19      	ldr	r3, [pc, #100]	@ (80004a8 <main+0x228>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	2200      	movs	r2, #0
 8000448:	625a      	str	r2, [r3, #36]	@ 0x24
	  __HAL_TIM_SET_AUTORELOAD(&htim3, angleTimerValue);
 800044a:	4b10      	ldr	r3, [pc, #64]	@ (800048c <main+0x20c>)
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	4b16      	ldr	r3, [pc, #88]	@ (80004a8 <main+0x228>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000454:	4b0d      	ldr	r3, [pc, #52]	@ (800048c <main+0x20c>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	461a      	mov	r2, r3
 800045a:	4b13      	ldr	r3, [pc, #76]	@ (80004a8 <main+0x228>)
 800045c:	60da      	str	r2, [r3, #12]
	  olcAngleTimerValue = angleTimerValue;
 800045e:	4b0b      	ldr	r3, [pc, #44]	@ (800048c <main+0x20c>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4a10      	ldr	r2, [pc, #64]	@ (80004a4 <main+0x224>)
 8000464:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart1, "Timer Period Changed\r\n", strlen("Timer Period Changed\r\n"), 100);
 8000466:	2364      	movs	r3, #100	@ 0x64
 8000468:	2216      	movs	r2, #22
 800046a:	4910      	ldr	r1, [pc, #64]	@ (80004ac <main+0x22c>)
 800046c:	4809      	ldr	r0, [pc, #36]	@ (8000494 <main+0x214>)
 800046e:	f003 fa95 	bl	800399c <HAL_UART_Transmit>
	  if(printflag){
 8000472:	e721      	b.n	80002b8 <main+0x38>
 8000474:	20000104 	.word	0x20000104
 8000478:	20000084 	.word	0x20000084
 800047c:	200000d0 	.word	0x200000d0
 8000480:	2000007c 	.word	0x2000007c
 8000484:	200000d1 	.word	0x200000d1
 8000488:	200001dc 	.word	0x200001dc
 800048c:	200001e0 	.word	0x200001e0
 8000490:	080046bc 	.word	0x080046bc
 8000494:	20000088 	.word	0x20000088
 8000498:	080046ec 	.word	0x080046ec
 800049c:	200000d4 	.word	0x200000d4
 80004a0:	cccccccd 	.word	0xcccccccd
 80004a4:	200001e4 	.word	0x200001e4
 80004a8:	2000014c 	.word	0x2000014c
 80004ac:	08004720 	.word	0x08004720

080004b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b094      	sub	sp, #80	@ 0x50
 80004b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004ba:	2228      	movs	r2, #40	@ 0x28
 80004bc:	2100      	movs	r1, #0
 80004be:	4618      	mov	r0, r3
 80004c0:	f003 fc60 	bl	8003d84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c4:	f107 0314 	add.w	r3, r7, #20
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	605a      	str	r2, [r3, #4]
 80004ce:	609a      	str	r2, [r3, #8]
 80004d0:	60da      	str	r2, [r3, #12]
 80004d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004e0:	2302      	movs	r3, #2
 80004e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004e4:	2301      	movs	r3, #1
 80004e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004e8:	2310      	movs	r3, #16
 80004ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004ec:	2300      	movs	r3, #0
 80004ee:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004f4:	4618      	mov	r0, r3
 80004f6:	f001 fc91 	bl	8001e1c <HAL_RCC_OscConfig>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000500:	f000 faaa 	bl	8000a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000504:	230f      	movs	r3, #15
 8000506:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000508:	2300      	movs	r3, #0
 800050a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800050c:	2300      	movs	r3, #0
 800050e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000510:	2300      	movs	r3, #0
 8000512:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000514:	2300      	movs	r3, #0
 8000516:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000518:	f107 0314 	add.w	r3, r7, #20
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f001 fefe 	bl	8002320 <HAL_RCC_ClockConfig>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800052a:	f000 fa95 	bl	8000a58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800052e:	2302      	movs	r3, #2
 8000530:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	4618      	mov	r0, r3
 800053a:	f002 f87f 	bl	800263c <HAL_RCCEx_PeriphCLKConfig>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000544:	f000 fa88 	bl	8000a58 <Error_Handler>
  }
}
 8000548:	bf00      	nop
 800054a:	3750      	adds	r7, #80	@ 0x50
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}

08000550 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000560:	4b18      	ldr	r3, [pc, #96]	@ (80005c4 <MX_ADC1_Init+0x74>)
 8000562:	4a19      	ldr	r2, [pc, #100]	@ (80005c8 <MX_ADC1_Init+0x78>)
 8000564:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000566:	4b17      	ldr	r3, [pc, #92]	@ (80005c4 <MX_ADC1_Init+0x74>)
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800056c:	4b15      	ldr	r3, [pc, #84]	@ (80005c4 <MX_ADC1_Init+0x74>)
 800056e:	2200      	movs	r2, #0
 8000570:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000572:	4b14      	ldr	r3, [pc, #80]	@ (80005c4 <MX_ADC1_Init+0x74>)
 8000574:	2200      	movs	r2, #0
 8000576:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000578:	4b12      	ldr	r3, [pc, #72]	@ (80005c4 <MX_ADC1_Init+0x74>)
 800057a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800057e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000580:	4b10      	ldr	r3, [pc, #64]	@ (80005c4 <MX_ADC1_Init+0x74>)
 8000582:	2200      	movs	r2, #0
 8000584:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000586:	4b0f      	ldr	r3, [pc, #60]	@ (80005c4 <MX_ADC1_Init+0x74>)
 8000588:	2201      	movs	r2, #1
 800058a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800058c:	480d      	ldr	r0, [pc, #52]	@ (80005c4 <MX_ADC1_Init+0x74>)
 800058e:	f000 fd57 	bl	8001040 <HAL_ADC_Init>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000598:	f000 fa5e 	bl	8000a58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005a0:	2301      	movs	r3, #1
 80005a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	4619      	mov	r1, r3
 80005ac:	4805      	ldr	r0, [pc, #20]	@ (80005c4 <MX_ADC1_Init+0x74>)
 80005ae:	f000 ffdf 	bl	8001570 <HAL_ADC_ConfigChannel>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80005b8:	f000 fa4e 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005bc:	bf00      	nop
 80005be:	3710      	adds	r7, #16
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	200000d4 	.word	0x200000d4
 80005c8:	40012400 	.word	0x40012400

080005cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005d2:	f107 0308 	add.w	r3, r7, #8
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005e0:	463b      	mov	r3, r7
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000664 <MX_TIM1_Init+0x98>)
 80005ea:	4a1f      	ldr	r2, [pc, #124]	@ (8000668 <MX_TIM1_Init+0x9c>)
 80005ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 80005ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000664 <MX_TIM1_Init+0x98>)
 80005f0:	2207      	movs	r2, #7
 80005f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000664 <MX_TIM1_Init+0x98>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80005fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000664 <MX_TIM1_Init+0x98>)
 80005fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000600:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000602:	4b18      	ldr	r3, [pc, #96]	@ (8000664 <MX_TIM1_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000608:	4b16      	ldr	r3, [pc, #88]	@ (8000664 <MX_TIM1_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800060e:	4b15      	ldr	r3, [pc, #84]	@ (8000664 <MX_TIM1_Init+0x98>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000614:	4813      	ldr	r0, [pc, #76]	@ (8000664 <MX_TIM1_Init+0x98>)
 8000616:	f002 f97d 	bl	8002914 <HAL_TIM_Base_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000620:	f000 fa1a 	bl	8000a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000624:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000628:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800062a:	f107 0308 	add.w	r3, r7, #8
 800062e:	4619      	mov	r1, r3
 8000630:	480c      	ldr	r0, [pc, #48]	@ (8000664 <MX_TIM1_Init+0x98>)
 8000632:	f002 fd53 	bl	80030dc <HAL_TIM_ConfigClockSource>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800063c:	f000 fa0c 	bl	8000a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000640:	2300      	movs	r3, #0
 8000642:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000648:	463b      	mov	r3, r7
 800064a:	4619      	mov	r1, r3
 800064c:	4805      	ldr	r0, [pc, #20]	@ (8000664 <MX_TIM1_Init+0x98>)
 800064e:	f003 f8e5 	bl	800381c <HAL_TIMEx_MasterConfigSynchronization>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000658:	f000 f9fe 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	3718      	adds	r7, #24
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000104 	.word	0x20000104
 8000668:	40012c00 	.word	0x40012c00

0800066c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000672:	f107 0308 	add.w	r3, r7, #8
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000680:	463b      	mov	r3, r7
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000688:	4b1d      	ldr	r3, [pc, #116]	@ (8000700 <MX_TIM3_Init+0x94>)
 800068a:	4a1e      	ldr	r2, [pc, #120]	@ (8000704 <MX_TIM3_Init+0x98>)
 800068c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 70;
 800068e:	4b1c      	ldr	r3, [pc, #112]	@ (8000700 <MX_TIM3_Init+0x94>)
 8000690:	2246      	movs	r2, #70	@ 0x46
 8000692:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000694:	4b1a      	ldr	r3, [pc, #104]	@ (8000700 <MX_TIM3_Init+0x94>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = angleTimerValue;
 800069a:	4b1b      	ldr	r3, [pc, #108]	@ (8000708 <MX_TIM3_Init+0x9c>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	461a      	mov	r2, r3
 80006a0:	4b17      	ldr	r3, [pc, #92]	@ (8000700 <MX_TIM3_Init+0x94>)
 80006a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a4:	4b16      	ldr	r3, [pc, #88]	@ (8000700 <MX_TIM3_Init+0x94>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006aa:	4b15      	ldr	r3, [pc, #84]	@ (8000700 <MX_TIM3_Init+0x94>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006b0:	4813      	ldr	r0, [pc, #76]	@ (8000700 <MX_TIM3_Init+0x94>)
 80006b2:	f002 f92f 	bl	8002914 <HAL_TIM_Base_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80006bc:	f000 f9cc 	bl	8000a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006c6:	f107 0308 	add.w	r3, r7, #8
 80006ca:	4619      	mov	r1, r3
 80006cc:	480c      	ldr	r0, [pc, #48]	@ (8000700 <MX_TIM3_Init+0x94>)
 80006ce:	f002 fd05 	bl	80030dc <HAL_TIM_ConfigClockSource>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80006d8:	f000 f9be 	bl	8000a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006dc:	2300      	movs	r3, #0
 80006de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006e4:	463b      	mov	r3, r7
 80006e6:	4619      	mov	r1, r3
 80006e8:	4805      	ldr	r0, [pc, #20]	@ (8000700 <MX_TIM3_Init+0x94>)
 80006ea:	f003 f897 	bl	800381c <HAL_TIMEx_MasterConfigSynchronization>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80006f4:	f000 f9b0 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	3718      	adds	r7, #24
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	2000014c 	.word	0x2000014c
 8000704:	40000400 	.word	0x40000400
 8000708:	200001e0 	.word	0x200001e0

0800070c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08e      	sub	sp, #56	@ 0x38
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000712:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000720:	f107 0320 	add.w	r3, r7, #32
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]
 8000738:	615a      	str	r2, [r3, #20]
 800073a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800073c:	4b30      	ldr	r3, [pc, #192]	@ (8000800 <MX_TIM4_Init+0xf4>)
 800073e:	4a31      	ldr	r2, [pc, #196]	@ (8000804 <MX_TIM4_Init+0xf8>)
 8000740:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 70;
 8000742:	4b2f      	ldr	r3, [pc, #188]	@ (8000800 <MX_TIM4_Init+0xf4>)
 8000744:	2246      	movs	r2, #70	@ 0x46
 8000746:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000748:	4b2d      	ldr	r3, [pc, #180]	@ (8000800 <MX_TIM4_Init+0xf4>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 800074e:	4b2c      	ldr	r3, [pc, #176]	@ (8000800 <MX_TIM4_Init+0xf4>)
 8000750:	2264      	movs	r2, #100	@ 0x64
 8000752:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000754:	4b2a      	ldr	r3, [pc, #168]	@ (8000800 <MX_TIM4_Init+0xf4>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075a:	4b29      	ldr	r3, [pc, #164]	@ (8000800 <MX_TIM4_Init+0xf4>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000760:	4827      	ldr	r0, [pc, #156]	@ (8000800 <MX_TIM4_Init+0xf4>)
 8000762:	f002 f8d7 	bl	8002914 <HAL_TIM_Base_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 800076c:	f000 f974 	bl	8000a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000770:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000774:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000776:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800077a:	4619      	mov	r1, r3
 800077c:	4820      	ldr	r0, [pc, #128]	@ (8000800 <MX_TIM4_Init+0xf4>)
 800077e:	f002 fcad 	bl	80030dc <HAL_TIM_ConfigClockSource>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000788:	f000 f966 	bl	8000a58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800078c:	481c      	ldr	r0, [pc, #112]	@ (8000800 <MX_TIM4_Init+0xf4>)
 800078e:	f002 f9db 	bl	8002b48 <HAL_TIM_PWM_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000798:	f000 f95e 	bl	8000a58 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 800079c:	2108      	movs	r1, #8
 800079e:	4818      	ldr	r0, [pc, #96]	@ (8000800 <MX_TIM4_Init+0xf4>)
 80007a0:	f002 fa2a 	bl	8002bf8 <HAL_TIM_OnePulse_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 80007aa:	f000 f955 	bl	8000a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ae:	2300      	movs	r3, #0
 80007b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b2:	2300      	movs	r3, #0
 80007b4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007b6:	f107 0320 	add.w	r3, r7, #32
 80007ba:	4619      	mov	r1, r3
 80007bc:	4810      	ldr	r0, [pc, #64]	@ (8000800 <MX_TIM4_Init+0xf4>)
 80007be:	f003 f82d 	bl	800381c <HAL_TIMEx_MasterConfigSynchronization>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 80007c8:	f000 f946 	bl	8000a58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007cc:	2360      	movs	r3, #96	@ 0x60
 80007ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 30;
 80007d0:	231e      	movs	r3, #30
 80007d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80007d4:	2302      	movs	r3, #2
 80007d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2200      	movs	r2, #0
 80007e0:	4619      	mov	r1, r3
 80007e2:	4807      	ldr	r0, [pc, #28]	@ (8000800 <MX_TIM4_Init+0xf4>)
 80007e4:	f002 fbb8 	bl	8002f58 <HAL_TIM_PWM_ConfigChannel>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 80007ee:	f000 f933 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80007f2:	4803      	ldr	r0, [pc, #12]	@ (8000800 <MX_TIM4_Init+0xf4>)
 80007f4:	f000 fa1a 	bl	8000c2c <HAL_TIM_MspPostInit>

}
 80007f8:	bf00      	nop
 80007fa:	3738      	adds	r7, #56	@ 0x38
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000194 	.word	0x20000194
 8000804:	40000800 	.word	0x40000800

08000808 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800080c:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <MX_USART1_UART_Init+0x4c>)
 800080e:	4a12      	ldr	r2, [pc, #72]	@ (8000858 <MX_USART1_UART_Init+0x50>)
 8000810:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000812:	4b10      	ldr	r3, [pc, #64]	@ (8000854 <MX_USART1_UART_Init+0x4c>)
 8000814:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000818:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800081a:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <MX_USART1_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000820:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <MX_USART1_UART_Init+0x4c>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	@ (8000854 <MX_USART1_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800082c:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <MX_USART1_UART_Init+0x4c>)
 800082e:	220c      	movs	r2, #12
 8000830:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000832:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <MX_USART1_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <MX_USART1_UART_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	@ (8000854 <MX_USART1_UART_Init+0x4c>)
 8000840:	f003 f85c 	bl	80038fc <HAL_UART_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800084a:	f000 f905 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000088 	.word	0x20000088
 8000858:	40013800 	.word	0x40013800

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	f107 0308 	add.w	r3, r7, #8
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000870:	4b21      	ldr	r3, [pc, #132]	@ (80008f8 <MX_GPIO_Init+0x9c>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	4a20      	ldr	r2, [pc, #128]	@ (80008f8 <MX_GPIO_Init+0x9c>)
 8000876:	f043 0304 	orr.w	r3, r3, #4
 800087a:	6193      	str	r3, [r2, #24]
 800087c:	4b1e      	ldr	r3, [pc, #120]	@ (80008f8 <MX_GPIO_Init+0x9c>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	f003 0304 	and.w	r3, r3, #4
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000888:	4b1b      	ldr	r3, [pc, #108]	@ (80008f8 <MX_GPIO_Init+0x9c>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	4a1a      	ldr	r2, [pc, #104]	@ (80008f8 <MX_GPIO_Init+0x9c>)
 800088e:	f043 0308 	orr.w	r3, r3, #8
 8000892:	6193      	str	r3, [r2, #24]
 8000894:	4b18      	ldr	r3, [pc, #96]	@ (80008f8 <MX_GPIO_Init+0x9c>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	f003 0308 	and.w	r3, r3, #8
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2110      	movs	r1, #16
 80008a4:	4815      	ldr	r0, [pc, #84]	@ (80008fc <MX_GPIO_Init+0xa0>)
 80008a6:	f001 fa89 	bl	8001dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80008aa:	2310      	movs	r3, #16
 80008ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2302      	movs	r3, #2
 80008b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ba:	f107 0308 	add.w	r3, r7, #8
 80008be:	4619      	mov	r1, r3
 80008c0:	480e      	ldr	r0, [pc, #56]	@ (80008fc <MX_GPIO_Init+0xa0>)
 80008c2:	f001 f8f7 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80008c6:	2320      	movs	r3, #32
 80008c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000900 <MX_GPIO_Init+0xa4>)
 80008cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d2:	f107 0308 	add.w	r3, r7, #8
 80008d6:	4619      	mov	r1, r3
 80008d8:	4808      	ldr	r0, [pc, #32]	@ (80008fc <MX_GPIO_Init+0xa0>)
 80008da:	f001 f8eb 	bl	8001ab4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2100      	movs	r1, #0
 80008e2:	2017      	movs	r0, #23
 80008e4:	f001 f8af 	bl	8001a46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80008e8:	2017      	movs	r0, #23
 80008ea:	f001 f8c8 	bl	8001a7e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ee:	bf00      	nop
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40021000 	.word	0x40021000
 80008fc:	40010c00 	.word	0x40010c00
 8000900:	10110000 	.word	0x10110000

08000904 <HAL_GPIO_EXTI_Callback>:


volatile bool fireRequired = false;
volatile bool pulseDetected = false;
/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	80fb      	strh	r3, [r7, #6]

	frequencyCounter++;
 800090e:	4b0f      	ldr	r3, [pc, #60]	@ (800094c <HAL_GPIO_EXTI_Callback+0x48>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	3301      	adds	r3, #1
 8000914:	4a0d      	ldr	r2, [pc, #52]	@ (800094c <HAL_GPIO_EXTI_Callback+0x48>)
 8000916:	6013      	str	r3, [r2, #0]
	pulseDetected = true;
 8000918:	4b0d      	ldr	r3, [pc, #52]	@ (8000950 <HAL_GPIO_EXTI_Callback+0x4c>)
 800091a:	2201      	movs	r2, #1
 800091c:	701a      	strb	r2, [r3, #0]
	if( frequencyCalculated){
 800091e:	4b0d      	ldr	r3, [pc, #52]	@ (8000954 <HAL_GPIO_EXTI_Callback+0x50>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d00d      	beq.n	8000942 <HAL_GPIO_EXTI_Callback+0x3e>
		if(!fireRequired){
 8000926:	4b0c      	ldr	r3, [pc, #48]	@ (8000958 <HAL_GPIO_EXTI_Callback+0x54>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	b2db      	uxtb	r3, r3
 800092c:	f083 0301 	eor.w	r3, r3, #1
 8000930:	b2db      	uxtb	r3, r3
 8000932:	2b00      	cmp	r3, #0
 8000934:	d005      	beq.n	8000942 <HAL_GPIO_EXTI_Callback+0x3e>
			fireRequired = true;
 8000936:	4b08      	ldr	r3, [pc, #32]	@ (8000958 <HAL_GPIO_EXTI_Callback+0x54>)
 8000938:	2201      	movs	r2, #1
 800093a:	701a      	strb	r2, [r3, #0]

			HAL_TIM_Base_Start_IT(&htim3);
 800093c:	4807      	ldr	r0, [pc, #28]	@ (800095c <HAL_GPIO_EXTI_Callback+0x58>)
 800093e:	f002 f883 	bl	8002a48 <HAL_TIM_Base_Start_IT>
		}
	}
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000078 	.word	0x20000078
 8000950:	200001e9 	.word	0x200001e9
 8000954:	200000d0 	.word	0x200000d0
 8000958:	200001e8 	.word	0x200001e8
 800095c:	2000014c 	.word	0x2000014c

08000960 <App_1MS_Handler>:

void App_1MS_Handler(){
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0


	if(frequencyTimer++ >= 1000){
 8000964:	4b0c      	ldr	r3, [pc, #48]	@ (8000998 <App_1MS_Handler+0x38>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	1c5a      	adds	r2, r3, #1
 800096a:	490b      	ldr	r1, [pc, #44]	@ (8000998 <App_1MS_Handler+0x38>)
 800096c:	600a      	str	r2, [r1, #0]
 800096e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000972:	d30d      	bcc.n	8000990 <App_1MS_Handler+0x30>
		frequencyTimer = 0;
 8000974:	4b08      	ldr	r3, [pc, #32]	@ (8000998 <App_1MS_Handler+0x38>)
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
		frequencyReceived = frequencyCounter/4;
 800097a:	4b08      	ldr	r3, [pc, #32]	@ (800099c <App_1MS_Handler+0x3c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	089b      	lsrs	r3, r3, #2
 8000980:	4a07      	ldr	r2, [pc, #28]	@ (80009a0 <App_1MS_Handler+0x40>)
 8000982:	6013      	str	r3, [r2, #0]
		frequencyCounter = 0;
 8000984:	4b05      	ldr	r3, [pc, #20]	@ (800099c <App_1MS_Handler+0x3c>)
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
		printflag = true;
 800098a:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <App_1MS_Handler+0x44>)
 800098c:	2201      	movs	r2, #1
 800098e:	701a      	strb	r2, [r3, #0]
	}

}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr
 8000998:	20000080 	.word	0x20000080
 800099c:	20000078 	.word	0x20000078
 80009a0:	2000007c 	.word	0x2000007c
 80009a4:	20000084 	.word	0x20000084

080009a8 <HAL_TIM_PeriodElapsedCallback>:

volatile bool pulseGiven = false;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a0b      	ldr	r2, [pc, #44]	@ (80009e4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d110      	bne.n	80009dc <HAL_TIM_PeriodElapsedCallback+0x34>

		if(HAL_TIM_Base_GetState(&htim3) == HAL_TIM_STATE_BUSY){
 80009ba:	480b      	ldr	r0, [pc, #44]	@ (80009e8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80009bc:	f002 fc70 	bl	80032a0 <HAL_TIM_Base_GetState>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d10a      	bne.n	80009dc <HAL_TIM_PeriodElapsedCallback+0x34>
			HAL_TIM_Base_Stop_IT(&htim3);
 80009c6:	4808      	ldr	r0, [pc, #32]	@ (80009e8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80009c8:	f002 f890 	bl	8002aec <HAL_TIM_Base_Stop_IT>

			pulseDetected = false;
 80009cc:	4b07      	ldr	r3, [pc, #28]	@ (80009ec <HAL_TIM_PeriodElapsedCallback+0x44>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	701a      	strb	r2, [r3, #0]
			 deneme();
 80009d2:	f000 f825 	bl	8000a20 <deneme>
			 fireRequired = false;
 80009d6:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80009d8:	2200      	movs	r2, #0
 80009da:	701a      	strb	r2, [r3, #0]
		}

	}

}
 80009dc:	bf00      	nop
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40000400 	.word	0x40000400
 80009e8:	2000014c 	.word	0x2000014c
 80009ec:	200001e9 	.word	0x200001e9
 80009f0:	200001e8 	.word	0x200001e8

080009f4 <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4){
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a05      	ldr	r2, [pc, #20]	@ (8000a18 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d102      	bne.n	8000a0c <HAL_TIM_PWM_PulseFinishedCallback+0x18>
		pulseGiven = false;
 8000a06:	4b05      	ldr	r3, [pc, #20]	@ (8000a1c <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	701a      	strb	r2, [r3, #0]
	}
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	40000800 	.word	0x40000800
 8000a1c:	200001ea 	.word	0x200001ea

08000a20 <deneme>:
void deneme(){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0

//	if(!pulseGiven){
//		pulseGiven = true;
		/* start pwm */
	if(angleTimerValue != 0){
 8000a24:	4b0a      	ldr	r3, [pc, #40]	@ (8000a50 <deneme+0x30>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d00e      	beq.n	8000a4a <deneme+0x2a>
		__HAL_TIM_ENABLE(&htim4);
 8000a2c:	4b09      	ldr	r3, [pc, #36]	@ (8000a54 <deneme+0x34>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	4b08      	ldr	r3, [pc, #32]	@ (8000a54 <deneme+0x34>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f042 0201 	orr.w	r2, r2, #1
 8000a3a:	601a      	str	r2, [r3, #0]

		   HAL_TIM_Base_Start(&htim4);
 8000a3c:	4805      	ldr	r0, [pc, #20]	@ (8000a54 <deneme+0x34>)
 8000a3e:	f001 ffb9 	bl	80029b4 <HAL_TIM_Base_Start>
		   HAL_TIM_OnePulse_Start_IT(&htim4, TIM_CHANNEL_1);
 8000a42:	2100      	movs	r1, #0
 8000a44:	4803      	ldr	r0, [pc, #12]	@ (8000a54 <deneme+0x34>)
 8000a46:	f002 f931 	bl	8002cac <HAL_TIM_OnePulse_Start_IT>
	}



}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	200001e0 	.word	0x200001e0
 8000a54:	20000194 	.word	0x20000194

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <Error_Handler+0x8>

08000a64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a6a:	4b15      	ldr	r3, [pc, #84]	@ (8000ac0 <HAL_MspInit+0x5c>)
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	4a14      	ldr	r2, [pc, #80]	@ (8000ac0 <HAL_MspInit+0x5c>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6193      	str	r3, [r2, #24]
 8000a76:	4b12      	ldr	r3, [pc, #72]	@ (8000ac0 <HAL_MspInit+0x5c>)
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a82:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac0 <HAL_MspInit+0x5c>)
 8000a84:	69db      	ldr	r3, [r3, #28]
 8000a86:	4a0e      	ldr	r2, [pc, #56]	@ (8000ac0 <HAL_MspInit+0x5c>)
 8000a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a8c:	61d3      	str	r3, [r2, #28]
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac0 <HAL_MspInit+0x5c>)
 8000a90:	69db      	ldr	r3, [r3, #28]
 8000a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac4 <HAL_MspInit+0x60>)
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	4a04      	ldr	r2, [pc, #16]	@ (8000ac4 <HAL_MspInit+0x60>)
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	3714      	adds	r7, #20
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	40010000 	.word	0x40010000

08000ac8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b088      	sub	sp, #32
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0310 	add.w	r3, r7, #16
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a14      	ldr	r2, [pc, #80]	@ (8000b34 <HAL_ADC_MspInit+0x6c>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d121      	bne.n	8000b2c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ae8:	4b13      	ldr	r3, [pc, #76]	@ (8000b38 <HAL_ADC_MspInit+0x70>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	4a12      	ldr	r2, [pc, #72]	@ (8000b38 <HAL_ADC_MspInit+0x70>)
 8000aee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000af2:	6193      	str	r3, [r2, #24]
 8000af4:	4b10      	ldr	r3, [pc, #64]	@ (8000b38 <HAL_ADC_MspInit+0x70>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b00:	4b0d      	ldr	r3, [pc, #52]	@ (8000b38 <HAL_ADC_MspInit+0x70>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	4a0c      	ldr	r2, [pc, #48]	@ (8000b38 <HAL_ADC_MspInit+0x70>)
 8000b06:	f043 0304 	orr.w	r3, r3, #4
 8000b0a:	6193      	str	r3, [r2, #24]
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b38 <HAL_ADC_MspInit+0x70>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f003 0304 	and.w	r3, r3, #4
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b20:	f107 0310 	add.w	r3, r7, #16
 8000b24:	4619      	mov	r1, r3
 8000b26:	4805      	ldr	r0, [pc, #20]	@ (8000b3c <HAL_ADC_MspInit+0x74>)
 8000b28:	f000 ffc4 	bl	8001ab4 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b2c:	bf00      	nop
 8000b2e:	3720      	adds	r7, #32
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40012400 	.word	0x40012400
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40010800 	.word	0x40010800

08000b40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a33      	ldr	r2, [pc, #204]	@ (8000c1c <HAL_TIM_Base_MspInit+0xdc>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d12c      	bne.n	8000bac <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b52:	4b33      	ldr	r3, [pc, #204]	@ (8000c20 <HAL_TIM_Base_MspInit+0xe0>)
 8000b54:	699b      	ldr	r3, [r3, #24]
 8000b56:	4a32      	ldr	r2, [pc, #200]	@ (8000c20 <HAL_TIM_Base_MspInit+0xe0>)
 8000b58:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b5c:	6193      	str	r3, [r2, #24]
 8000b5e:	4b30      	ldr	r3, [pc, #192]	@ (8000c20 <HAL_TIM_Base_MspInit+0xe0>)
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	2018      	movs	r0, #24
 8000b70:	f000 ff69 	bl	8001a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8000b74:	2018      	movs	r0, #24
 8000b76:	f000 ff82 	bl	8001a7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	2019      	movs	r0, #25
 8000b80:	f000 ff61 	bl	8001a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000b84:	2019      	movs	r0, #25
 8000b86:	f000 ff7a 	bl	8001a7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	201a      	movs	r0, #26
 8000b90:	f000 ff59 	bl	8001a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8000b94:	201a      	movs	r0, #26
 8000b96:	f000 ff72 	bl	8001a7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	201b      	movs	r0, #27
 8000ba0:	f000 ff51 	bl	8001a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000ba4:	201b      	movs	r0, #27
 8000ba6:	f000 ff6a 	bl	8001a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000baa:	e032      	b.n	8000c12 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM3)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a1c      	ldr	r2, [pc, #112]	@ (8000c24 <HAL_TIM_Base_MspInit+0xe4>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d114      	bne.n	8000be0 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c20 <HAL_TIM_Base_MspInit+0xe0>)
 8000bb8:	69db      	ldr	r3, [r3, #28]
 8000bba:	4a19      	ldr	r2, [pc, #100]	@ (8000c20 <HAL_TIM_Base_MspInit+0xe0>)
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	61d3      	str	r3, [r2, #28]
 8000bc2:	4b17      	ldr	r3, [pc, #92]	@ (8000c20 <HAL_TIM_Base_MspInit+0xe0>)
 8000bc4:	69db      	ldr	r3, [r3, #28]
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	201d      	movs	r0, #29
 8000bd4:	f000 ff37 	bl	8001a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000bd8:	201d      	movs	r0, #29
 8000bda:	f000 ff50 	bl	8001a7e <HAL_NVIC_EnableIRQ>
}
 8000bde:	e018      	b.n	8000c12 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM4)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a10      	ldr	r2, [pc, #64]	@ (8000c28 <HAL_TIM_Base_MspInit+0xe8>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d113      	bne.n	8000c12 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000bea:	4b0d      	ldr	r3, [pc, #52]	@ (8000c20 <HAL_TIM_Base_MspInit+0xe0>)
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	4a0c      	ldr	r2, [pc, #48]	@ (8000c20 <HAL_TIM_Base_MspInit+0xe0>)
 8000bf0:	f043 0304 	orr.w	r3, r3, #4
 8000bf4:	61d3      	str	r3, [r2, #28]
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c20 <HAL_TIM_Base_MspInit+0xe0>)
 8000bf8:	69db      	ldr	r3, [r3, #28]
 8000bfa:	f003 0304 	and.w	r3, r3, #4
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2100      	movs	r1, #0
 8000c06:	201e      	movs	r0, #30
 8000c08:	f000 ff1d 	bl	8001a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000c0c:	201e      	movs	r0, #30
 8000c0e:	f000 ff36 	bl	8001a7e <HAL_NVIC_EnableIRQ>
}
 8000c12:	bf00      	nop
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40012c00 	.word	0x40012c00
 8000c20:	40021000 	.word	0x40021000
 8000c24:	40000400 	.word	0x40000400
 8000c28:	40000800 	.word	0x40000800

08000c2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b088      	sub	sp, #32
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 0310 	add.w	r3, r7, #16
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a0f      	ldr	r2, [pc, #60]	@ (8000c84 <HAL_TIM_MspPostInit+0x58>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d117      	bne.n	8000c7c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c88 <HAL_TIM_MspPostInit+0x5c>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	4a0d      	ldr	r2, [pc, #52]	@ (8000c88 <HAL_TIM_MspPostInit+0x5c>)
 8000c52:	f043 0308 	orr.w	r3, r3, #8
 8000c56:	6193      	str	r3, [r2, #24]
 8000c58:	4b0b      	ldr	r3, [pc, #44]	@ (8000c88 <HAL_TIM_MspPostInit+0x5c>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	f003 0308 	and.w	r3, r3, #8
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c64:	2340      	movs	r3, #64	@ 0x40
 8000c66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c70:	f107 0310 	add.w	r3, r7, #16
 8000c74:	4619      	mov	r1, r3
 8000c76:	4805      	ldr	r0, [pc, #20]	@ (8000c8c <HAL_TIM_MspPostInit+0x60>)
 8000c78:	f000 ff1c 	bl	8001ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000c7c:	bf00      	nop
 8000c7e:	3720      	adds	r7, #32
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40000800 	.word	0x40000800
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	40010c00 	.word	0x40010c00

08000c90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0310 	add.w	r3, r7, #16
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a1c      	ldr	r2, [pc, #112]	@ (8000d1c <HAL_UART_MspInit+0x8c>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d131      	bne.n	8000d14 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d20 <HAL_UART_MspInit+0x90>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	4a1a      	ldr	r2, [pc, #104]	@ (8000d20 <HAL_UART_MspInit+0x90>)
 8000cb6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cba:	6193      	str	r3, [r2, #24]
 8000cbc:	4b18      	ldr	r3, [pc, #96]	@ (8000d20 <HAL_UART_MspInit+0x90>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc8:	4b15      	ldr	r3, [pc, #84]	@ (8000d20 <HAL_UART_MspInit+0x90>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	4a14      	ldr	r2, [pc, #80]	@ (8000d20 <HAL_UART_MspInit+0x90>)
 8000cce:	f043 0304 	orr.w	r3, r3, #4
 8000cd2:	6193      	str	r3, [r2, #24]
 8000cd4:	4b12      	ldr	r3, [pc, #72]	@ (8000d20 <HAL_UART_MspInit+0x90>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	f003 0304 	and.w	r3, r3, #4
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ce0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ce4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cea:	2303      	movs	r3, #3
 8000cec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cee:	f107 0310 	add.w	r3, r7, #16
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	480b      	ldr	r0, [pc, #44]	@ (8000d24 <HAL_UART_MspInit+0x94>)
 8000cf6:	f000 fedd 	bl	8001ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d08:	f107 0310 	add.w	r3, r7, #16
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4805      	ldr	r0, [pc, #20]	@ (8000d24 <HAL_UART_MspInit+0x94>)
 8000d10:	f000 fed0 	bl	8001ab4 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000d14:	bf00      	nop
 8000d16:	3720      	adds	r7, #32
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40013800 	.word	0x40013800
 8000d20:	40021000 	.word	0x40021000
 8000d24:	40010800 	.word	0x40010800

08000d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	 HAL_UART_Transmit(&huart1, "anan\r\n", strlen("anan\r\n"), 100);
 8000d2c:	2364      	movs	r3, #100	@ 0x64
 8000d2e:	2206      	movs	r2, #6
 8000d30:	4902      	ldr	r1, [pc, #8]	@ (8000d3c <NMI_Handler+0x14>)
 8000d32:	4803      	ldr	r0, [pc, #12]	@ (8000d40 <NMI_Handler+0x18>)
 8000d34:	f002 fe32 	bl	800399c <HAL_UART_Transmit>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <NMI_Handler+0x10>
 8000d3c:	08004738 	.word	0x08004738
 8000d40:	20000088 	.word	0x20000088

08000d44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	 HAL_UART_Transmit(&huart1, "anan\r\n", strlen("anan\r\n"), 100);
 8000d48:	2364      	movs	r3, #100	@ 0x64
 8000d4a:	2206      	movs	r2, #6
 8000d4c:	4902      	ldr	r1, [pc, #8]	@ (8000d58 <HardFault_Handler+0x14>)
 8000d4e:	4803      	ldr	r0, [pc, #12]	@ (8000d5c <HardFault_Handler+0x18>)
 8000d50:	f002 fe24 	bl	800399c <HAL_UART_Transmit>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <HardFault_Handler+0x10>
 8000d58:	08004738 	.word	0x08004738
 8000d5c:	20000088 	.word	0x20000088

08000d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	 HAL_UART_Transmit(&huart1, "anan\r\n", strlen("anan\r\n"), 100);
 8000d64:	2364      	movs	r3, #100	@ 0x64
 8000d66:	2206      	movs	r2, #6
 8000d68:	4902      	ldr	r1, [pc, #8]	@ (8000d74 <MemManage_Handler+0x14>)
 8000d6a:	4803      	ldr	r0, [pc, #12]	@ (8000d78 <MemManage_Handler+0x18>)
 8000d6c:	f002 fe16 	bl	800399c <HAL_UART_Transmit>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <MemManage_Handler+0x10>
 8000d74:	08004738 	.word	0x08004738
 8000d78:	20000088 	.word	0x20000088

08000d7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	 HAL_UART_Transmit(&huart1, "anan\r\n", strlen("anan\r\n"), 100);
 8000d80:	2364      	movs	r3, #100	@ 0x64
 8000d82:	2206      	movs	r2, #6
 8000d84:	4902      	ldr	r1, [pc, #8]	@ (8000d90 <BusFault_Handler+0x14>)
 8000d86:	4803      	ldr	r0, [pc, #12]	@ (8000d94 <BusFault_Handler+0x18>)
 8000d88:	f002 fe08 	bl	800399c <HAL_UART_Transmit>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <BusFault_Handler+0x10>
 8000d90:	08004738 	.word	0x08004738
 8000d94:	20000088 	.word	0x20000088

08000d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	 HAL_UART_Transmit(&huart1, "anan\r\n", strlen("anan\r\n"), 100);
 8000d9c:	2364      	movs	r3, #100	@ 0x64
 8000d9e:	2206      	movs	r2, #6
 8000da0:	4902      	ldr	r1, [pc, #8]	@ (8000dac <UsageFault_Handler+0x14>)
 8000da2:	4803      	ldr	r0, [pc, #12]	@ (8000db0 <UsageFault_Handler+0x18>)
 8000da4:	f002 fdfa 	bl	800399c <HAL_UART_Transmit>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <UsageFault_Handler+0x10>
 8000dac:	08004738 	.word	0x08004738
 8000db0:	20000088 	.word	0x20000088

08000db4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr

08000dcc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr

08000dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ddc:	f000 f8f0 	bl	8000fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  App_1MS_Handler();
 8000de0:	f7ff fdbe 	bl	8000960 <App_1MS_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000dec:	2020      	movs	r0, #32
 8000dee:	f000 fffd 	bl	8001dec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000dfc:	4802      	ldr	r0, [pc, #8]	@ (8000e08 <TIM1_BRK_IRQHandler+0x10>)
 8000dfe:	f001 ffbb 	bl	8002d78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000104 	.word	0x20000104

08000e0c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e10:	4802      	ldr	r0, [pc, #8]	@ (8000e1c <TIM1_UP_IRQHandler+0x10>)
 8000e12:	f001 ffb1 	bl	8002d78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000104 	.word	0x20000104

08000e20 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e24:	4802      	ldr	r0, [pc, #8]	@ (8000e30 <TIM1_TRG_COM_IRQHandler+0x10>)
 8000e26:	f001 ffa7 	bl	8002d78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000104 	.word	0x20000104

08000e34 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e38:	4802      	ldr	r0, [pc, #8]	@ (8000e44 <TIM1_CC_IRQHandler+0x10>)
 8000e3a:	f001 ff9d 	bl	8002d78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000104 	.word	0x20000104

08000e48 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e4c:	4802      	ldr	r0, [pc, #8]	@ (8000e58 <TIM3_IRQHandler+0x10>)
 8000e4e:	f001 ff93 	bl	8002d78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	2000014c 	.word	0x2000014c

08000e5c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e60:	4802      	ldr	r0, [pc, #8]	@ (8000e6c <TIM4_IRQHandler+0x10>)
 8000e62:	f001 ff89 	bl	8002d78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000194 	.word	0x20000194

08000e70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e78:	4a14      	ldr	r2, [pc, #80]	@ (8000ecc <_sbrk+0x5c>)
 8000e7a:	4b15      	ldr	r3, [pc, #84]	@ (8000ed0 <_sbrk+0x60>)
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e84:	4b13      	ldr	r3, [pc, #76]	@ (8000ed4 <_sbrk+0x64>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d102      	bne.n	8000e92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	@ (8000ed4 <_sbrk+0x64>)
 8000e8e:	4a12      	ldr	r2, [pc, #72]	@ (8000ed8 <_sbrk+0x68>)
 8000e90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e92:	4b10      	ldr	r3, [pc, #64]	@ (8000ed4 <_sbrk+0x64>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4413      	add	r3, r2
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d207      	bcs.n	8000eb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ea0:	f002 ff78 	bl	8003d94 <__errno>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	220c      	movs	r2, #12
 8000ea8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000eae:	e009      	b.n	8000ec4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eb0:	4b08      	ldr	r3, [pc, #32]	@ (8000ed4 <_sbrk+0x64>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eb6:	4b07      	ldr	r3, [pc, #28]	@ (8000ed4 <_sbrk+0x64>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	4a05      	ldr	r2, [pc, #20]	@ (8000ed4 <_sbrk+0x64>)
 8000ec0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20005000 	.word	0x20005000
 8000ed0:	00000400 	.word	0x00000400
 8000ed4:	200001ec 	.word	0x200001ec
 8000ed8:	20000340 	.word	0x20000340

08000edc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr

08000ee8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ee8:	f7ff fff8 	bl	8000edc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eec:	480b      	ldr	r0, [pc, #44]	@ (8000f1c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000eee:	490c      	ldr	r1, [pc, #48]	@ (8000f20 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ef0:	4a0c      	ldr	r2, [pc, #48]	@ (8000f24 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef4:	e002      	b.n	8000efc <LoopCopyDataInit>

08000ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000efa:	3304      	adds	r3, #4

08000efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f00:	d3f9      	bcc.n	8000ef6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f02:	4a09      	ldr	r2, [pc, #36]	@ (8000f28 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f04:	4c09      	ldr	r4, [pc, #36]	@ (8000f2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f08:	e001      	b.n	8000f0e <LoopFillZerobss>

08000f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f0c:	3204      	adds	r2, #4

08000f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f10:	d3fb      	bcc.n	8000f0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f12:	f002 ff45 	bl	8003da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f16:	f7ff f9b3 	bl	8000280 <main>
  bx lr
 8000f1a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f20:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f24:	080047c4 	.word	0x080047c4
  ldr r2, =_sbss
 8000f28:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f2c:	2000033c 	.word	0x2000033c

08000f30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f30:	e7fe      	b.n	8000f30 <ADC1_2_IRQHandler>
	...

08000f34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f38:	4b08      	ldr	r3, [pc, #32]	@ (8000f5c <HAL_Init+0x28>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a07      	ldr	r2, [pc, #28]	@ (8000f5c <HAL_Init+0x28>)
 8000f3e:	f043 0310 	orr.w	r3, r3, #16
 8000f42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f44:	2003      	movs	r0, #3
 8000f46:	f000 fd73 	bl	8001a30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f4a:	200f      	movs	r0, #15
 8000f4c:	f000 f808 	bl	8000f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f50:	f7ff fd88 	bl	8000a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40022000 	.word	0x40022000

08000f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f68:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <HAL_InitTick+0x54>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4b12      	ldr	r3, [pc, #72]	@ (8000fb8 <HAL_InitTick+0x58>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4619      	mov	r1, r3
 8000f72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 fd8b 	bl	8001a9a <HAL_SYSTICK_Config>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00e      	b.n	8000fac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2b0f      	cmp	r3, #15
 8000f92:	d80a      	bhi.n	8000faa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f94:	2200      	movs	r2, #0
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9c:	f000 fd53 	bl	8001a46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa0:	4a06      	ldr	r2, [pc, #24]	@ (8000fbc <HAL_InitTick+0x5c>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	e000      	b.n	8000fac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	20000008 	.word	0x20000008
 8000fbc:	20000004 	.word	0x20000004

08000fc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc4:	4b05      	ldr	r3, [pc, #20]	@ (8000fdc <HAL_IncTick+0x1c>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b05      	ldr	r3, [pc, #20]	@ (8000fe0 <HAL_IncTick+0x20>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	4a03      	ldr	r2, [pc, #12]	@ (8000fe0 <HAL_IncTick+0x20>)
 8000fd2:	6013      	str	r3, [r2, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	20000008 	.word	0x20000008
 8000fe0:	200001f0 	.word	0x200001f0

08000fe4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe8:	4b02      	ldr	r3, [pc, #8]	@ (8000ff4 <HAL_GetTick+0x10>)
 8000fea:	681b      	ldr	r3, [r3, #0]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr
 8000ff4:	200001f0 	.word	0x200001f0

08000ff8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001000:	f7ff fff0 	bl	8000fe4 <HAL_GetTick>
 8001004:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001010:	d005      	beq.n	800101e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001012:	4b0a      	ldr	r3, [pc, #40]	@ (800103c <HAL_Delay+0x44>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	461a      	mov	r2, r3
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4413      	add	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800101e:	bf00      	nop
 8001020:	f7ff ffe0 	bl	8000fe4 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	429a      	cmp	r2, r3
 800102e:	d8f7      	bhi.n	8001020 <HAL_Delay+0x28>
  {
  }
}
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000008 	.word	0x20000008

08001040 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001048:	2300      	movs	r3, #0
 800104a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800104c:	2300      	movs	r3, #0
 800104e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001050:	2300      	movs	r3, #0
 8001052:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d101      	bne.n	8001062 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e0be      	b.n	80011e0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800106c:	2b00      	cmp	r3, #0
 800106e:	d109      	bne.n	8001084 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff fd22 	bl	8000ac8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 fbc5 	bl	8001814 <ADC_ConversionStop_Disable>
 800108a:	4603      	mov	r3, r0
 800108c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001092:	f003 0310 	and.w	r3, r3, #16
 8001096:	2b00      	cmp	r3, #0
 8001098:	f040 8099 	bne.w	80011ce <HAL_ADC_Init+0x18e>
 800109c:	7dfb      	ldrb	r3, [r7, #23]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f040 8095 	bne.w	80011ce <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010a8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80010ac:	f023 0302 	bic.w	r3, r3, #2
 80010b0:	f043 0202 	orr.w	r2, r3, #2
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010c0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	7b1b      	ldrb	r3, [r3, #12]
 80010c6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80010c8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010d8:	d003      	beq.n	80010e2 <HAL_ADC_Init+0xa2>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d102      	bne.n	80010e8 <HAL_ADC_Init+0xa8>
 80010e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010e6:	e000      	b.n	80010ea <HAL_ADC_Init+0xaa>
 80010e8:	2300      	movs	r3, #0
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	7d1b      	ldrb	r3, [r3, #20]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d119      	bne.n	800112c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	7b1b      	ldrb	r3, [r3, #12]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d109      	bne.n	8001114 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	3b01      	subs	r3, #1
 8001106:	035a      	lsls	r2, r3, #13
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	4313      	orrs	r3, r2
 800110c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	e00b      	b.n	800112c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001118:	f043 0220 	orr.w	r2, r3, #32
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001124:	f043 0201 	orr.w	r2, r3, #1
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	430a      	orrs	r2, r1
 800113e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	689a      	ldr	r2, [r3, #8]
 8001146:	4b28      	ldr	r3, [pc, #160]	@ (80011e8 <HAL_ADC_Init+0x1a8>)
 8001148:	4013      	ands	r3, r2
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	6812      	ldr	r2, [r2, #0]
 800114e:	68b9      	ldr	r1, [r7, #8]
 8001150:	430b      	orrs	r3, r1
 8001152:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800115c:	d003      	beq.n	8001166 <HAL_ADC_Init+0x126>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d104      	bne.n	8001170 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	3b01      	subs	r3, #1
 800116c:	051b      	lsls	r3, r3, #20
 800116e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001176:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	430a      	orrs	r2, r1
 8001182:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	689a      	ldr	r2, [r3, #8]
 800118a:	4b18      	ldr	r3, [pc, #96]	@ (80011ec <HAL_ADC_Init+0x1ac>)
 800118c:	4013      	ands	r3, r2
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	429a      	cmp	r2, r3
 8001192:	d10b      	bne.n	80011ac <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800119e:	f023 0303 	bic.w	r3, r3, #3
 80011a2:	f043 0201 	orr.w	r2, r3, #1
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011aa:	e018      	b.n	80011de <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011b0:	f023 0312 	bic.w	r3, r3, #18
 80011b4:	f043 0210 	orr.w	r2, r3, #16
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011c0:	f043 0201 	orr.w	r2, r3, #1
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011cc:	e007      	b.n	80011de <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011d2:	f043 0210 	orr.w	r2, r3, #16
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011de:	7dfb      	ldrb	r3, [r7, #23]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	ffe1f7fd 	.word	0xffe1f7fd
 80011ec:	ff1f0efe 	.word	0xff1f0efe

080011f0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011f8:	2300      	movs	r3, #0
 80011fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001202:	2b01      	cmp	r3, #1
 8001204:	d101      	bne.n	800120a <HAL_ADC_Start+0x1a>
 8001206:	2302      	movs	r3, #2
 8001208:	e098      	b.n	800133c <HAL_ADC_Start+0x14c>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2201      	movs	r2, #1
 800120e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f000 faa4 	bl	8001760 <ADC_Enable>
 8001218:	4603      	mov	r3, r0
 800121a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	2b00      	cmp	r3, #0
 8001220:	f040 8087 	bne.w	8001332 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001228:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800122c:	f023 0301 	bic.w	r3, r3, #1
 8001230:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a41      	ldr	r2, [pc, #260]	@ (8001344 <HAL_ADC_Start+0x154>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d105      	bne.n	800124e <HAL_ADC_Start+0x5e>
 8001242:	4b41      	ldr	r3, [pc, #260]	@ (8001348 <HAL_ADC_Start+0x158>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d115      	bne.n	800127a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001252:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001264:	2b00      	cmp	r3, #0
 8001266:	d026      	beq.n	80012b6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800126c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001270:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001278:	e01d      	b.n	80012b6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800127e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a2f      	ldr	r2, [pc, #188]	@ (8001348 <HAL_ADC_Start+0x158>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d004      	beq.n	800129a <HAL_ADC_Start+0xaa>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a2b      	ldr	r2, [pc, #172]	@ (8001344 <HAL_ADC_Start+0x154>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d10d      	bne.n	80012b6 <HAL_ADC_Start+0xc6>
 800129a:	4b2b      	ldr	r3, [pc, #172]	@ (8001348 <HAL_ADC_Start+0x158>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d007      	beq.n	80012b6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012aa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80012ae:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d006      	beq.n	80012d0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012c6:	f023 0206 	bic.w	r2, r3, #6
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80012ce:	e002      	b.n	80012d6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f06f 0202 	mvn.w	r2, #2
 80012e6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80012f2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80012f6:	d113      	bne.n	8001320 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80012fc:	4a11      	ldr	r2, [pc, #68]	@ (8001344 <HAL_ADC_Start+0x154>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d105      	bne.n	800130e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001302:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <HAL_ADC_Start+0x158>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800130a:	2b00      	cmp	r3, #0
 800130c:	d108      	bne.n	8001320 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	e00c      	b.n	800133a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	e003      	b.n	800133a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800133a:	7bfb      	ldrb	r3, [r7, #15]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40012800 	.word	0x40012800
 8001348:	40012400 	.word	0x40012400

0800134c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800134c:	b590      	push	{r4, r7, lr}
 800134e:	b087      	sub	sp, #28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001362:	f7ff fe3f 	bl	8000fe4 <HAL_GetTick>
 8001366:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001372:	2b00      	cmp	r3, #0
 8001374:	d00b      	beq.n	800138e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800137a:	f043 0220 	orr.w	r2, r3, #32
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e0d3      	b.n	8001536 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001398:	2b00      	cmp	r3, #0
 800139a:	d131      	bne.n	8001400 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013a2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d12a      	bne.n	8001400 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80013aa:	e021      	b.n	80013f0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b2:	d01d      	beq.n	80013f0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d007      	beq.n	80013ca <HAL_ADC_PollForConversion+0x7e>
 80013ba:	f7ff fe13 	bl	8000fe4 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d212      	bcs.n	80013f0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d10b      	bne.n	80013f0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013dc:	f043 0204 	orr.w	r2, r3, #4
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e0a2      	b.n	8001536 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0d6      	beq.n	80013ac <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80013fe:	e070      	b.n	80014e2 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001400:	4b4f      	ldr	r3, [pc, #316]	@ (8001540 <HAL_ADC_PollForConversion+0x1f4>)
 8001402:	681c      	ldr	r4, [r3, #0]
 8001404:	2002      	movs	r0, #2
 8001406:	f001 f9cf 	bl	80027a8 <HAL_RCCEx_GetPeriphCLKFreq>
 800140a:	4603      	mov	r3, r0
 800140c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6919      	ldr	r1, [r3, #16]
 8001416:	4b4b      	ldr	r3, [pc, #300]	@ (8001544 <HAL_ADC_PollForConversion+0x1f8>)
 8001418:	400b      	ands	r3, r1
 800141a:	2b00      	cmp	r3, #0
 800141c:	d118      	bne.n	8001450 <HAL_ADC_PollForConversion+0x104>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	68d9      	ldr	r1, [r3, #12]
 8001424:	4b48      	ldr	r3, [pc, #288]	@ (8001548 <HAL_ADC_PollForConversion+0x1fc>)
 8001426:	400b      	ands	r3, r1
 8001428:	2b00      	cmp	r3, #0
 800142a:	d111      	bne.n	8001450 <HAL_ADC_PollForConversion+0x104>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6919      	ldr	r1, [r3, #16]
 8001432:	4b46      	ldr	r3, [pc, #280]	@ (800154c <HAL_ADC_PollForConversion+0x200>)
 8001434:	400b      	ands	r3, r1
 8001436:	2b00      	cmp	r3, #0
 8001438:	d108      	bne.n	800144c <HAL_ADC_PollForConversion+0x100>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	68d9      	ldr	r1, [r3, #12]
 8001440:	4b43      	ldr	r3, [pc, #268]	@ (8001550 <HAL_ADC_PollForConversion+0x204>)
 8001442:	400b      	ands	r3, r1
 8001444:	2b00      	cmp	r3, #0
 8001446:	d101      	bne.n	800144c <HAL_ADC_PollForConversion+0x100>
 8001448:	2314      	movs	r3, #20
 800144a:	e020      	b.n	800148e <HAL_ADC_PollForConversion+0x142>
 800144c:	2329      	movs	r3, #41	@ 0x29
 800144e:	e01e      	b.n	800148e <HAL_ADC_PollForConversion+0x142>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6919      	ldr	r1, [r3, #16]
 8001456:	4b3d      	ldr	r3, [pc, #244]	@ (800154c <HAL_ADC_PollForConversion+0x200>)
 8001458:	400b      	ands	r3, r1
 800145a:	2b00      	cmp	r3, #0
 800145c:	d106      	bne.n	800146c <HAL_ADC_PollForConversion+0x120>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	68d9      	ldr	r1, [r3, #12]
 8001464:	4b3a      	ldr	r3, [pc, #232]	@ (8001550 <HAL_ADC_PollForConversion+0x204>)
 8001466:	400b      	ands	r3, r1
 8001468:	2b00      	cmp	r3, #0
 800146a:	d00d      	beq.n	8001488 <HAL_ADC_PollForConversion+0x13c>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6919      	ldr	r1, [r3, #16]
 8001472:	4b38      	ldr	r3, [pc, #224]	@ (8001554 <HAL_ADC_PollForConversion+0x208>)
 8001474:	400b      	ands	r3, r1
 8001476:	2b00      	cmp	r3, #0
 8001478:	d108      	bne.n	800148c <HAL_ADC_PollForConversion+0x140>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68d9      	ldr	r1, [r3, #12]
 8001480:	4b34      	ldr	r3, [pc, #208]	@ (8001554 <HAL_ADC_PollForConversion+0x208>)
 8001482:	400b      	ands	r3, r1
 8001484:	2b00      	cmp	r3, #0
 8001486:	d101      	bne.n	800148c <HAL_ADC_PollForConversion+0x140>
 8001488:	2354      	movs	r3, #84	@ 0x54
 800148a:	e000      	b.n	800148e <HAL_ADC_PollForConversion+0x142>
 800148c:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800148e:	fb02 f303 	mul.w	r3, r2, r3
 8001492:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001494:	e021      	b.n	80014da <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800149c:	d01a      	beq.n	80014d4 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d007      	beq.n	80014b4 <HAL_ADC_PollForConversion+0x168>
 80014a4:	f7ff fd9e 	bl	8000fe4 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d20f      	bcs.n	80014d4 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d90b      	bls.n	80014d4 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014c0:	f043 0204 	orr.w	r2, r3, #4
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e030      	b.n	8001536 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	3301      	adds	r3, #1
 80014d8:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d8d9      	bhi.n	8001496 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f06f 0212 	mvn.w	r2, #18
 80014ea:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001502:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001506:	d115      	bne.n	8001534 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800150c:	2b00      	cmp	r3, #0
 800150e:	d111      	bne.n	8001534 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001514:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001520:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d105      	bne.n	8001534 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800152c:	f043 0201 	orr.w	r2, r3, #1
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	371c      	adds	r7, #28
 800153a:	46bd      	mov	sp, r7
 800153c:	bd90      	pop	{r4, r7, pc}
 800153e:	bf00      	nop
 8001540:	20000000 	.word	0x20000000
 8001544:	24924924 	.word	0x24924924
 8001548:	00924924 	.word	0x00924924
 800154c:	12492492 	.word	0x12492492
 8001550:	00492492 	.word	0x00492492
 8001554:	00249249 	.word	0x00249249

08001558 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr

08001570 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800157a:	2300      	movs	r3, #0
 800157c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001588:	2b01      	cmp	r3, #1
 800158a:	d101      	bne.n	8001590 <HAL_ADC_ConfigChannel+0x20>
 800158c:	2302      	movs	r3, #2
 800158e:	e0dc      	b.n	800174a <HAL_ADC_ConfigChannel+0x1da>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	2b06      	cmp	r3, #6
 800159e:	d81c      	bhi.n	80015da <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	4613      	mov	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	3b05      	subs	r3, #5
 80015b2:	221f      	movs	r2, #31
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	4019      	ands	r1, r3
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	6818      	ldr	r0, [r3, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	4613      	mov	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	3b05      	subs	r3, #5
 80015cc:	fa00 f203 	lsl.w	r2, r0, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	635a      	str	r2, [r3, #52]	@ 0x34
 80015d8:	e03c      	b.n	8001654 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b0c      	cmp	r3, #12
 80015e0:	d81c      	bhi.n	800161c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	3b23      	subs	r3, #35	@ 0x23
 80015f4:	221f      	movs	r2, #31
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43db      	mvns	r3, r3
 80015fc:	4019      	ands	r1, r3
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	6818      	ldr	r0, [r3, #0]
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	4613      	mov	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	3b23      	subs	r3, #35	@ 0x23
 800160e:	fa00 f203 	lsl.w	r2, r0, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	430a      	orrs	r2, r1
 8001618:	631a      	str	r2, [r3, #48]	@ 0x30
 800161a:	e01b      	b.n	8001654 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	3b41      	subs	r3, #65	@ 0x41
 800162e:	221f      	movs	r2, #31
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	4019      	ands	r1, r3
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	6818      	ldr	r0, [r3, #0]
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	3b41      	subs	r3, #65	@ 0x41
 8001648:	fa00 f203 	lsl.w	r2, r0, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	430a      	orrs	r2, r1
 8001652:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b09      	cmp	r3, #9
 800165a:	d91c      	bls.n	8001696 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68d9      	ldr	r1, [r3, #12]
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	4613      	mov	r3, r2
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	4413      	add	r3, r2
 800166c:	3b1e      	subs	r3, #30
 800166e:	2207      	movs	r2, #7
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	4019      	ands	r1, r3
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	6898      	ldr	r0, [r3, #8]
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4613      	mov	r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	4413      	add	r3, r2
 8001686:	3b1e      	subs	r3, #30
 8001688:	fa00 f203 	lsl.w	r2, r0, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	430a      	orrs	r2, r1
 8001692:	60da      	str	r2, [r3, #12]
 8001694:	e019      	b.n	80016ca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	6919      	ldr	r1, [r3, #16]
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4613      	mov	r3, r2
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	4413      	add	r3, r2
 80016a6:	2207      	movs	r2, #7
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	4019      	ands	r1, r3
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	6898      	ldr	r0, [r3, #8]
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4613      	mov	r3, r2
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	4413      	add	r3, r2
 80016be:	fa00 f203 	lsl.w	r2, r0, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	430a      	orrs	r2, r1
 80016c8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b10      	cmp	r3, #16
 80016d0:	d003      	beq.n	80016da <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016d6:	2b11      	cmp	r3, #17
 80016d8:	d132      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a1d      	ldr	r2, [pc, #116]	@ (8001754 <HAL_ADC_ConfigChannel+0x1e4>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d125      	bne.n	8001730 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d126      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001700:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2b10      	cmp	r3, #16
 8001708:	d11a      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800170a:	4b13      	ldr	r3, [pc, #76]	@ (8001758 <HAL_ADC_ConfigChannel+0x1e8>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a13      	ldr	r2, [pc, #76]	@ (800175c <HAL_ADC_ConfigChannel+0x1ec>)
 8001710:	fba2 2303 	umull	r2, r3, r2, r3
 8001714:	0c9a      	lsrs	r2, r3, #18
 8001716:	4613      	mov	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4413      	add	r3, r2
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001720:	e002      	b.n	8001728 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	3b01      	subs	r3, #1
 8001726:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f9      	bne.n	8001722 <HAL_ADC_ConfigChannel+0x1b2>
 800172e:	e007      	b.n	8001740 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001734:	f043 0220 	orr.w	r2, r3, #32
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001748:	7bfb      	ldrb	r3, [r7, #15]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr
 8001754:	40012400 	.word	0x40012400
 8001758:	20000000 	.word	0x20000000
 800175c:	431bde83 	.word	0x431bde83

08001760 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001768:	2300      	movs	r3, #0
 800176a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b01      	cmp	r3, #1
 800177c:	d040      	beq.n	8001800 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f042 0201 	orr.w	r2, r2, #1
 800178c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800178e:	4b1f      	ldr	r3, [pc, #124]	@ (800180c <ADC_Enable+0xac>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a1f      	ldr	r2, [pc, #124]	@ (8001810 <ADC_Enable+0xb0>)
 8001794:	fba2 2303 	umull	r2, r3, r2, r3
 8001798:	0c9b      	lsrs	r3, r3, #18
 800179a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800179c:	e002      	b.n	80017a4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	3b01      	subs	r3, #1
 80017a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f9      	bne.n	800179e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017aa:	f7ff fc1b 	bl	8000fe4 <HAL_GetTick>
 80017ae:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80017b0:	e01f      	b.n	80017f2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80017b2:	f7ff fc17 	bl	8000fe4 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d918      	bls.n	80017f2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d011      	beq.n	80017f2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017d2:	f043 0210 	orr.w	r2, r3, #16
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017de:	f043 0201 	orr.w	r2, r3, #1
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e007      	b.n	8001802 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d1d8      	bne.n	80017b2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000000 	.word	0x20000000
 8001810:	431bde83 	.word	0x431bde83

08001814 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b01      	cmp	r3, #1
 800182c:	d12e      	bne.n	800188c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 0201 	bic.w	r2, r2, #1
 800183c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800183e:	f7ff fbd1 	bl	8000fe4 <HAL_GetTick>
 8001842:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001844:	e01b      	b.n	800187e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001846:	f7ff fbcd 	bl	8000fe4 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d914      	bls.n	800187e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b01      	cmp	r3, #1
 8001860:	d10d      	bne.n	800187e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001866:	f043 0210 	orr.w	r2, r3, #16
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001872:	f043 0201 	orr.w	r2, r3, #1
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e007      	b.n	800188e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b01      	cmp	r3, #1
 800188a:	d0dc      	beq.n	8001846 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a8:	4b0c      	ldr	r3, [pc, #48]	@ (80018dc <__NVIC_SetPriorityGrouping+0x44>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ae:	68ba      	ldr	r2, [r7, #8]
 80018b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018b4:	4013      	ands	r3, r2
 80018b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ca:	4a04      	ldr	r2, [pc, #16]	@ (80018dc <__NVIC_SetPriorityGrouping+0x44>)
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	60d3      	str	r3, [r2, #12]
}
 80018d0:	bf00      	nop
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e4:	4b04      	ldr	r3, [pc, #16]	@ (80018f8 <__NVIC_GetPriorityGrouping+0x18>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	0a1b      	lsrs	r3, r3, #8
 80018ea:	f003 0307 	and.w	r3, r3, #7
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	2b00      	cmp	r3, #0
 800190c:	db0b      	blt.n	8001926 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	f003 021f 	and.w	r2, r3, #31
 8001914:	4906      	ldr	r1, [pc, #24]	@ (8001930 <__NVIC_EnableIRQ+0x34>)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	095b      	lsrs	r3, r3, #5
 800191c:	2001      	movs	r0, #1
 800191e:	fa00 f202 	lsl.w	r2, r0, r2
 8001922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	e000e100 	.word	0xe000e100

08001934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	6039      	str	r1, [r7, #0]
 800193e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001944:	2b00      	cmp	r3, #0
 8001946:	db0a      	blt.n	800195e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	b2da      	uxtb	r2, r3
 800194c:	490c      	ldr	r1, [pc, #48]	@ (8001980 <__NVIC_SetPriority+0x4c>)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	0112      	lsls	r2, r2, #4
 8001954:	b2d2      	uxtb	r2, r2
 8001956:	440b      	add	r3, r1
 8001958:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800195c:	e00a      	b.n	8001974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	b2da      	uxtb	r2, r3
 8001962:	4908      	ldr	r1, [pc, #32]	@ (8001984 <__NVIC_SetPriority+0x50>)
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	3b04      	subs	r3, #4
 800196c:	0112      	lsls	r2, r2, #4
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	440b      	add	r3, r1
 8001972:	761a      	strb	r2, [r3, #24]
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000e100 	.word	0xe000e100
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001988:	b480      	push	{r7}
 800198a:	b089      	sub	sp, #36	@ 0x24
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f1c3 0307 	rsb	r3, r3, #7
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	bf28      	it	cs
 80019a6:	2304      	movcs	r3, #4
 80019a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3304      	adds	r3, #4
 80019ae:	2b06      	cmp	r3, #6
 80019b0:	d902      	bls.n	80019b8 <NVIC_EncodePriority+0x30>
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	3b03      	subs	r3, #3
 80019b6:	e000      	b.n	80019ba <NVIC_EncodePriority+0x32>
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019bc:	f04f 32ff 	mov.w	r2, #4294967295
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43da      	mvns	r2, r3
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	401a      	ands	r2, r3
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d0:	f04f 31ff 	mov.w	r1, #4294967295
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	fa01 f303 	lsl.w	r3, r1, r3
 80019da:	43d9      	mvns	r1, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e0:	4313      	orrs	r3, r2
         );
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3724      	adds	r7, #36	@ 0x24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr

080019ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019fc:	d301      	bcc.n	8001a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019fe:	2301      	movs	r3, #1
 8001a00:	e00f      	b.n	8001a22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a02:	4a0a      	ldr	r2, [pc, #40]	@ (8001a2c <SysTick_Config+0x40>)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a0a:	210f      	movs	r1, #15
 8001a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a10:	f7ff ff90 	bl	8001934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a14:	4b05      	ldr	r3, [pc, #20]	@ (8001a2c <SysTick_Config+0x40>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a1a:	4b04      	ldr	r3, [pc, #16]	@ (8001a2c <SysTick_Config+0x40>)
 8001a1c:	2207      	movs	r2, #7
 8001a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	e000e010 	.word	0xe000e010

08001a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff ff2d 	bl	8001898 <__NVIC_SetPriorityGrouping>
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b086      	sub	sp, #24
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
 8001a52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a58:	f7ff ff42 	bl	80018e0 <__NVIC_GetPriorityGrouping>
 8001a5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	68b9      	ldr	r1, [r7, #8]
 8001a62:	6978      	ldr	r0, [r7, #20]
 8001a64:	f7ff ff90 	bl	8001988 <NVIC_EncodePriority>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a6e:	4611      	mov	r1, r2
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ff5f 	bl	8001934 <__NVIC_SetPriority>
}
 8001a76:	bf00      	nop
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	4603      	mov	r3, r0
 8001a86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff ff35 	bl	80018fc <__NVIC_EnableIRQ>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff ffa2 	bl	80019ec <SysTick_Config>
 8001aa8:	4603      	mov	r3, r0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b08b      	sub	sp, #44	@ 0x2c
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ac6:	e169      	b.n	8001d9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ac8:	2201      	movs	r2, #1
 8001aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	69fa      	ldr	r2, [r7, #28]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	f040 8158 	bne.w	8001d96 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	4a9a      	ldr	r2, [pc, #616]	@ (8001d54 <HAL_GPIO_Init+0x2a0>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d05e      	beq.n	8001bae <HAL_GPIO_Init+0xfa>
 8001af0:	4a98      	ldr	r2, [pc, #608]	@ (8001d54 <HAL_GPIO_Init+0x2a0>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d875      	bhi.n	8001be2 <HAL_GPIO_Init+0x12e>
 8001af6:	4a98      	ldr	r2, [pc, #608]	@ (8001d58 <HAL_GPIO_Init+0x2a4>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d058      	beq.n	8001bae <HAL_GPIO_Init+0xfa>
 8001afc:	4a96      	ldr	r2, [pc, #600]	@ (8001d58 <HAL_GPIO_Init+0x2a4>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d86f      	bhi.n	8001be2 <HAL_GPIO_Init+0x12e>
 8001b02:	4a96      	ldr	r2, [pc, #600]	@ (8001d5c <HAL_GPIO_Init+0x2a8>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d052      	beq.n	8001bae <HAL_GPIO_Init+0xfa>
 8001b08:	4a94      	ldr	r2, [pc, #592]	@ (8001d5c <HAL_GPIO_Init+0x2a8>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d869      	bhi.n	8001be2 <HAL_GPIO_Init+0x12e>
 8001b0e:	4a94      	ldr	r2, [pc, #592]	@ (8001d60 <HAL_GPIO_Init+0x2ac>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d04c      	beq.n	8001bae <HAL_GPIO_Init+0xfa>
 8001b14:	4a92      	ldr	r2, [pc, #584]	@ (8001d60 <HAL_GPIO_Init+0x2ac>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d863      	bhi.n	8001be2 <HAL_GPIO_Init+0x12e>
 8001b1a:	4a92      	ldr	r2, [pc, #584]	@ (8001d64 <HAL_GPIO_Init+0x2b0>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d046      	beq.n	8001bae <HAL_GPIO_Init+0xfa>
 8001b20:	4a90      	ldr	r2, [pc, #576]	@ (8001d64 <HAL_GPIO_Init+0x2b0>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d85d      	bhi.n	8001be2 <HAL_GPIO_Init+0x12e>
 8001b26:	2b12      	cmp	r3, #18
 8001b28:	d82a      	bhi.n	8001b80 <HAL_GPIO_Init+0xcc>
 8001b2a:	2b12      	cmp	r3, #18
 8001b2c:	d859      	bhi.n	8001be2 <HAL_GPIO_Init+0x12e>
 8001b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8001b34 <HAL_GPIO_Init+0x80>)
 8001b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b34:	08001baf 	.word	0x08001baf
 8001b38:	08001b89 	.word	0x08001b89
 8001b3c:	08001b9b 	.word	0x08001b9b
 8001b40:	08001bdd 	.word	0x08001bdd
 8001b44:	08001be3 	.word	0x08001be3
 8001b48:	08001be3 	.word	0x08001be3
 8001b4c:	08001be3 	.word	0x08001be3
 8001b50:	08001be3 	.word	0x08001be3
 8001b54:	08001be3 	.word	0x08001be3
 8001b58:	08001be3 	.word	0x08001be3
 8001b5c:	08001be3 	.word	0x08001be3
 8001b60:	08001be3 	.word	0x08001be3
 8001b64:	08001be3 	.word	0x08001be3
 8001b68:	08001be3 	.word	0x08001be3
 8001b6c:	08001be3 	.word	0x08001be3
 8001b70:	08001be3 	.word	0x08001be3
 8001b74:	08001be3 	.word	0x08001be3
 8001b78:	08001b91 	.word	0x08001b91
 8001b7c:	08001ba5 	.word	0x08001ba5
 8001b80:	4a79      	ldr	r2, [pc, #484]	@ (8001d68 <HAL_GPIO_Init+0x2b4>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d013      	beq.n	8001bae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b86:	e02c      	b.n	8001be2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	623b      	str	r3, [r7, #32]
          break;
 8001b8e:	e029      	b.n	8001be4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	3304      	adds	r3, #4
 8001b96:	623b      	str	r3, [r7, #32]
          break;
 8001b98:	e024      	b.n	8001be4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	3308      	adds	r3, #8
 8001ba0:	623b      	str	r3, [r7, #32]
          break;
 8001ba2:	e01f      	b.n	8001be4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	330c      	adds	r3, #12
 8001baa:	623b      	str	r3, [r7, #32]
          break;
 8001bac:	e01a      	b.n	8001be4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d102      	bne.n	8001bbc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	623b      	str	r3, [r7, #32]
          break;
 8001bba:	e013      	b.n	8001be4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d105      	bne.n	8001bd0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bc4:	2308      	movs	r3, #8
 8001bc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69fa      	ldr	r2, [r7, #28]
 8001bcc:	611a      	str	r2, [r3, #16]
          break;
 8001bce:	e009      	b.n	8001be4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bd0:	2308      	movs	r3, #8
 8001bd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	69fa      	ldr	r2, [r7, #28]
 8001bd8:	615a      	str	r2, [r3, #20]
          break;
 8001bda:	e003      	b.n	8001be4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	623b      	str	r3, [r7, #32]
          break;
 8001be0:	e000      	b.n	8001be4 <HAL_GPIO_Init+0x130>
          break;
 8001be2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	2bff      	cmp	r3, #255	@ 0xff
 8001be8:	d801      	bhi.n	8001bee <HAL_GPIO_Init+0x13a>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	e001      	b.n	8001bf2 <HAL_GPIO_Init+0x13e>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	2bff      	cmp	r3, #255	@ 0xff
 8001bf8:	d802      	bhi.n	8001c00 <HAL_GPIO_Init+0x14c>
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	e002      	b.n	8001c06 <HAL_GPIO_Init+0x152>
 8001c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c02:	3b08      	subs	r3, #8
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	210f      	movs	r1, #15
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	fa01 f303 	lsl.w	r3, r1, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	401a      	ands	r2, r3
 8001c18:	6a39      	ldr	r1, [r7, #32]
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c20:	431a      	orrs	r2, r3
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 80b1 	beq.w	8001d96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c34:	4b4d      	ldr	r3, [pc, #308]	@ (8001d6c <HAL_GPIO_Init+0x2b8>)
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	4a4c      	ldr	r2, [pc, #304]	@ (8001d6c <HAL_GPIO_Init+0x2b8>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	6193      	str	r3, [r2, #24]
 8001c40:	4b4a      	ldr	r3, [pc, #296]	@ (8001d6c <HAL_GPIO_Init+0x2b8>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c4c:	4a48      	ldr	r2, [pc, #288]	@ (8001d70 <HAL_GPIO_Init+0x2bc>)
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c50:	089b      	lsrs	r3, r3, #2
 8001c52:	3302      	adds	r3, #2
 8001c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5c:	f003 0303 	and.w	r3, r3, #3
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	220f      	movs	r2, #15
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a40      	ldr	r2, [pc, #256]	@ (8001d74 <HAL_GPIO_Init+0x2c0>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d013      	beq.n	8001ca0 <HAL_GPIO_Init+0x1ec>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a3f      	ldr	r2, [pc, #252]	@ (8001d78 <HAL_GPIO_Init+0x2c4>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d00d      	beq.n	8001c9c <HAL_GPIO_Init+0x1e8>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a3e      	ldr	r2, [pc, #248]	@ (8001d7c <HAL_GPIO_Init+0x2c8>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d007      	beq.n	8001c98 <HAL_GPIO_Init+0x1e4>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a3d      	ldr	r2, [pc, #244]	@ (8001d80 <HAL_GPIO_Init+0x2cc>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d101      	bne.n	8001c94 <HAL_GPIO_Init+0x1e0>
 8001c90:	2303      	movs	r3, #3
 8001c92:	e006      	b.n	8001ca2 <HAL_GPIO_Init+0x1ee>
 8001c94:	2304      	movs	r3, #4
 8001c96:	e004      	b.n	8001ca2 <HAL_GPIO_Init+0x1ee>
 8001c98:	2302      	movs	r3, #2
 8001c9a:	e002      	b.n	8001ca2 <HAL_GPIO_Init+0x1ee>
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e000      	b.n	8001ca2 <HAL_GPIO_Init+0x1ee>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ca4:	f002 0203 	and.w	r2, r2, #3
 8001ca8:	0092      	lsls	r2, r2, #2
 8001caa:	4093      	lsls	r3, r2
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cb2:	492f      	ldr	r1, [pc, #188]	@ (8001d70 <HAL_GPIO_Init+0x2bc>)
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb6:	089b      	lsrs	r3, r3, #2
 8001cb8:	3302      	adds	r3, #2
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d006      	beq.n	8001cda <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ccc:	4b2d      	ldr	r3, [pc, #180]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	492c      	ldr	r1, [pc, #176]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	608b      	str	r3, [r1, #8]
 8001cd8:	e006      	b.n	8001ce8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cda:	4b2a      	ldr	r3, [pc, #168]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	4928      	ldr	r1, [pc, #160]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d006      	beq.n	8001d02 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cf4:	4b23      	ldr	r3, [pc, #140]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001cf6:	68da      	ldr	r2, [r3, #12]
 8001cf8:	4922      	ldr	r1, [pc, #136]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	60cb      	str	r3, [r1, #12]
 8001d00:	e006      	b.n	8001d10 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d02:	4b20      	ldr	r3, [pc, #128]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	491e      	ldr	r1, [pc, #120]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d006      	beq.n	8001d2a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d1c:	4b19      	ldr	r3, [pc, #100]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	4918      	ldr	r1, [pc, #96]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	604b      	str	r3, [r1, #4]
 8001d28:	e006      	b.n	8001d38 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d2a:	4b16      	ldr	r3, [pc, #88]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	4914      	ldr	r1, [pc, #80]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001d34:	4013      	ands	r3, r2
 8001d36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d021      	beq.n	8001d88 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d44:	4b0f      	ldr	r3, [pc, #60]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	490e      	ldr	r1, [pc, #56]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	600b      	str	r3, [r1, #0]
 8001d50:	e021      	b.n	8001d96 <HAL_GPIO_Init+0x2e2>
 8001d52:	bf00      	nop
 8001d54:	10320000 	.word	0x10320000
 8001d58:	10310000 	.word	0x10310000
 8001d5c:	10220000 	.word	0x10220000
 8001d60:	10210000 	.word	0x10210000
 8001d64:	10120000 	.word	0x10120000
 8001d68:	10110000 	.word	0x10110000
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40010000 	.word	0x40010000
 8001d74:	40010800 	.word	0x40010800
 8001d78:	40010c00 	.word	0x40010c00
 8001d7c:	40011000 	.word	0x40011000
 8001d80:	40011400 	.word	0x40011400
 8001d84:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d88:	4b0b      	ldr	r3, [pc, #44]	@ (8001db8 <HAL_GPIO_Init+0x304>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	4909      	ldr	r1, [pc, #36]	@ (8001db8 <HAL_GPIO_Init+0x304>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d98:	3301      	adds	r3, #1
 8001d9a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da2:	fa22 f303 	lsr.w	r3, r2, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f47f ae8e 	bne.w	8001ac8 <HAL_GPIO_Init+0x14>
  }
}
 8001dac:	bf00      	nop
 8001dae:	bf00      	nop
 8001db0:	372c      	adds	r7, #44	@ 0x2c
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr
 8001db8:	40010400 	.word	0x40010400

08001dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	807b      	strh	r3, [r7, #2]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dcc:	787b      	ldrb	r3, [r7, #1]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dd2:	887a      	ldrh	r2, [r7, #2]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001dd8:	e003      	b.n	8001de2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dda:	887b      	ldrh	r3, [r7, #2]
 8001ddc:	041a      	lsls	r2, r3, #16
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	611a      	str	r2, [r3, #16]
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr

08001dec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001df6:	4b08      	ldr	r3, [pc, #32]	@ (8001e18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001df8:	695a      	ldr	r2, [r3, #20]
 8001dfa:	88fb      	ldrh	r3, [r7, #6]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d006      	beq.n	8001e10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e02:	4a05      	ldr	r2, [pc, #20]	@ (8001e18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e04:	88fb      	ldrh	r3, [r7, #6]
 8001e06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e08:	88fb      	ldrh	r3, [r7, #6]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe fd7a 	bl	8000904 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40010400 	.word	0x40010400

08001e1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e272      	b.n	8002314 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 8087 	beq.w	8001f4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e3c:	4b92      	ldr	r3, [pc, #584]	@ (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 030c 	and.w	r3, r3, #12
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d00c      	beq.n	8001e62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e48:	4b8f      	ldr	r3, [pc, #572]	@ (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 030c 	and.w	r3, r3, #12
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d112      	bne.n	8001e7a <HAL_RCC_OscConfig+0x5e>
 8001e54:	4b8c      	ldr	r3, [pc, #560]	@ (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e60:	d10b      	bne.n	8001e7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e62:	4b89      	ldr	r3, [pc, #548]	@ (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d06c      	beq.n	8001f48 <HAL_RCC_OscConfig+0x12c>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d168      	bne.n	8001f48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e24c      	b.n	8002314 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e82:	d106      	bne.n	8001e92 <HAL_RCC_OscConfig+0x76>
 8001e84:	4b80      	ldr	r3, [pc, #512]	@ (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a7f      	ldr	r2, [pc, #508]	@ (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e8e:	6013      	str	r3, [r2, #0]
 8001e90:	e02e      	b.n	8001ef0 <HAL_RCC_OscConfig+0xd4>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10c      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x98>
 8001e9a:	4b7b      	ldr	r3, [pc, #492]	@ (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a7a      	ldr	r2, [pc, #488]	@ (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	4b78      	ldr	r3, [pc, #480]	@ (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a77      	ldr	r2, [pc, #476]	@ (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	e01d      	b.n	8001ef0 <HAL_RCC_OscConfig+0xd4>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0xbc>
 8001ebe:	4b72      	ldr	r3, [pc, #456]	@ (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a71      	ldr	r2, [pc, #452]	@ (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	4b6f      	ldr	r3, [pc, #444]	@ (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a6e      	ldr	r2, [pc, #440]	@ (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	e00b      	b.n	8001ef0 <HAL_RCC_OscConfig+0xd4>
 8001ed8:	4b6b      	ldr	r3, [pc, #428]	@ (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a6a      	ldr	r2, [pc, #424]	@ (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001ede:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	4b68      	ldr	r3, [pc, #416]	@ (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a67      	ldr	r2, [pc, #412]	@ (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001eea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d013      	beq.n	8001f20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef8:	f7ff f874 	bl	8000fe4 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f00:	f7ff f870 	bl	8000fe4 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b64      	cmp	r3, #100	@ 0x64
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e200      	b.n	8002314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f12:	4b5d      	ldr	r3, [pc, #372]	@ (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_OscConfig+0xe4>
 8001f1e:	e014      	b.n	8001f4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f20:	f7ff f860 	bl	8000fe4 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f28:	f7ff f85c 	bl	8000fe4 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b64      	cmp	r3, #100	@ 0x64
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e1ec      	b.n	8002314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f3a:	4b53      	ldr	r3, [pc, #332]	@ (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f0      	bne.n	8001f28 <HAL_RCC_OscConfig+0x10c>
 8001f46:	e000      	b.n	8001f4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d063      	beq.n	800201e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f56:	4b4c      	ldr	r3, [pc, #304]	@ (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00b      	beq.n	8001f7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f62:	4b49      	ldr	r3, [pc, #292]	@ (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 030c 	and.w	r3, r3, #12
 8001f6a:	2b08      	cmp	r3, #8
 8001f6c:	d11c      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x18c>
 8001f6e:	4b46      	ldr	r3, [pc, #280]	@ (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d116      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f7a:	4b43      	ldr	r3, [pc, #268]	@ (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d005      	beq.n	8001f92 <HAL_RCC_OscConfig+0x176>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d001      	beq.n	8001f92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e1c0      	b.n	8002314 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f92:	4b3d      	ldr	r3, [pc, #244]	@ (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	4939      	ldr	r1, [pc, #228]	@ (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fa6:	e03a      	b.n	800201e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d020      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fb0:	4b36      	ldr	r3, [pc, #216]	@ (800208c <HAL_RCC_OscConfig+0x270>)
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb6:	f7ff f815 	bl	8000fe4 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fbe:	f7ff f811 	bl	8000fe4 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e1a1      	b.n	8002314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd0:	4b2d      	ldr	r3, [pc, #180]	@ (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0f0      	beq.n	8001fbe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fdc:	4b2a      	ldr	r3, [pc, #168]	@ (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	4927      	ldr	r1, [pc, #156]	@ (8002088 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	600b      	str	r3, [r1, #0]
 8001ff0:	e015      	b.n	800201e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ff2:	4b26      	ldr	r3, [pc, #152]	@ (800208c <HAL_RCC_OscConfig+0x270>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff8:	f7fe fff4 	bl	8000fe4 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002000:	f7fe fff0 	bl	8000fe4 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e180      	b.n	8002314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002012:	4b1d      	ldr	r3, [pc, #116]	@ (8002088 <HAL_RCC_OscConfig+0x26c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f0      	bne.n	8002000 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b00      	cmp	r3, #0
 8002028:	d03a      	beq.n	80020a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d019      	beq.n	8002066 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002032:	4b17      	ldr	r3, [pc, #92]	@ (8002090 <HAL_RCC_OscConfig+0x274>)
 8002034:	2201      	movs	r2, #1
 8002036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002038:	f7fe ffd4 	bl	8000fe4 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002040:	f7fe ffd0 	bl	8000fe4 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e160      	b.n	8002314 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002052:	4b0d      	ldr	r3, [pc, #52]	@ (8002088 <HAL_RCC_OscConfig+0x26c>)
 8002054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0f0      	beq.n	8002040 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800205e:	2001      	movs	r0, #1
 8002060:	f000 face 	bl	8002600 <RCC_Delay>
 8002064:	e01c      	b.n	80020a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002066:	4b0a      	ldr	r3, [pc, #40]	@ (8002090 <HAL_RCC_OscConfig+0x274>)
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206c:	f7fe ffba 	bl	8000fe4 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002072:	e00f      	b.n	8002094 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002074:	f7fe ffb6 	bl	8000fe4 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d908      	bls.n	8002094 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e146      	b.n	8002314 <HAL_RCC_OscConfig+0x4f8>
 8002086:	bf00      	nop
 8002088:	40021000 	.word	0x40021000
 800208c:	42420000 	.word	0x42420000
 8002090:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002094:	4b92      	ldr	r3, [pc, #584]	@ (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 8002096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1e9      	bne.n	8002074 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 80a6 	beq.w	80021fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ae:	2300      	movs	r3, #0
 80020b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b2:	4b8b      	ldr	r3, [pc, #556]	@ (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10d      	bne.n	80020da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020be:	4b88      	ldr	r3, [pc, #544]	@ (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	4a87      	ldr	r2, [pc, #540]	@ (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 80020c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020c8:	61d3      	str	r3, [r2, #28]
 80020ca:	4b85      	ldr	r3, [pc, #532]	@ (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020d6:	2301      	movs	r3, #1
 80020d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020da:	4b82      	ldr	r3, [pc, #520]	@ (80022e4 <HAL_RCC_OscConfig+0x4c8>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d118      	bne.n	8002118 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020e6:	4b7f      	ldr	r3, [pc, #508]	@ (80022e4 <HAL_RCC_OscConfig+0x4c8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a7e      	ldr	r2, [pc, #504]	@ (80022e4 <HAL_RCC_OscConfig+0x4c8>)
 80020ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020f2:	f7fe ff77 	bl	8000fe4 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020fa:	f7fe ff73 	bl	8000fe4 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b64      	cmp	r3, #100	@ 0x64
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e103      	b.n	8002314 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210c:	4b75      	ldr	r3, [pc, #468]	@ (80022e4 <HAL_RCC_OscConfig+0x4c8>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0f0      	beq.n	80020fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d106      	bne.n	800212e <HAL_RCC_OscConfig+0x312>
 8002120:	4b6f      	ldr	r3, [pc, #444]	@ (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	4a6e      	ldr	r2, [pc, #440]	@ (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	6213      	str	r3, [r2, #32]
 800212c:	e02d      	b.n	800218a <HAL_RCC_OscConfig+0x36e>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10c      	bne.n	8002150 <HAL_RCC_OscConfig+0x334>
 8002136:	4b6a      	ldr	r3, [pc, #424]	@ (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	4a69      	ldr	r2, [pc, #420]	@ (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 800213c:	f023 0301 	bic.w	r3, r3, #1
 8002140:	6213      	str	r3, [r2, #32]
 8002142:	4b67      	ldr	r3, [pc, #412]	@ (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	4a66      	ldr	r2, [pc, #408]	@ (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 8002148:	f023 0304 	bic.w	r3, r3, #4
 800214c:	6213      	str	r3, [r2, #32]
 800214e:	e01c      	b.n	800218a <HAL_RCC_OscConfig+0x36e>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	2b05      	cmp	r3, #5
 8002156:	d10c      	bne.n	8002172 <HAL_RCC_OscConfig+0x356>
 8002158:	4b61      	ldr	r3, [pc, #388]	@ (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	4a60      	ldr	r2, [pc, #384]	@ (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 800215e:	f043 0304 	orr.w	r3, r3, #4
 8002162:	6213      	str	r3, [r2, #32]
 8002164:	4b5e      	ldr	r3, [pc, #376]	@ (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	4a5d      	ldr	r2, [pc, #372]	@ (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	6213      	str	r3, [r2, #32]
 8002170:	e00b      	b.n	800218a <HAL_RCC_OscConfig+0x36e>
 8002172:	4b5b      	ldr	r3, [pc, #364]	@ (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	4a5a      	ldr	r2, [pc, #360]	@ (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 8002178:	f023 0301 	bic.w	r3, r3, #1
 800217c:	6213      	str	r3, [r2, #32]
 800217e:	4b58      	ldr	r3, [pc, #352]	@ (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	4a57      	ldr	r2, [pc, #348]	@ (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 8002184:	f023 0304 	bic.w	r3, r3, #4
 8002188:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d015      	beq.n	80021be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002192:	f7fe ff27 	bl	8000fe4 <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002198:	e00a      	b.n	80021b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219a:	f7fe ff23 	bl	8000fe4 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e0b1      	b.n	8002314 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b0:	4b4b      	ldr	r3, [pc, #300]	@ (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0ee      	beq.n	800219a <HAL_RCC_OscConfig+0x37e>
 80021bc:	e014      	b.n	80021e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021be:	f7fe ff11 	bl	8000fe4 <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c4:	e00a      	b.n	80021dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c6:	f7fe ff0d 	bl	8000fe4 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e09b      	b.n	8002314 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021dc:	4b40      	ldr	r3, [pc, #256]	@ (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1ee      	bne.n	80021c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021e8:	7dfb      	ldrb	r3, [r7, #23]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d105      	bne.n	80021fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ee:	4b3c      	ldr	r3, [pc, #240]	@ (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	4a3b      	ldr	r2, [pc, #236]	@ (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 80021f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 8087 	beq.w	8002312 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002204:	4b36      	ldr	r3, [pc, #216]	@ (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 030c 	and.w	r3, r3, #12
 800220c:	2b08      	cmp	r3, #8
 800220e:	d061      	beq.n	80022d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	2b02      	cmp	r3, #2
 8002216:	d146      	bne.n	80022a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002218:	4b33      	ldr	r3, [pc, #204]	@ (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221e:	f7fe fee1 	bl	8000fe4 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002226:	f7fe fedd 	bl	8000fe4 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e06d      	b.n	8002314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002238:	4b29      	ldr	r3, [pc, #164]	@ (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1f0      	bne.n	8002226 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800224c:	d108      	bne.n	8002260 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800224e:	4b24      	ldr	r3, [pc, #144]	@ (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	4921      	ldr	r1, [pc, #132]	@ (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 800225c:	4313      	orrs	r3, r2
 800225e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002260:	4b1f      	ldr	r3, [pc, #124]	@ (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a19      	ldr	r1, [r3, #32]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002270:	430b      	orrs	r3, r1
 8002272:	491b      	ldr	r1, [pc, #108]	@ (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 8002274:	4313      	orrs	r3, r2
 8002276:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002278:	4b1b      	ldr	r3, [pc, #108]	@ (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 800227a:	2201      	movs	r2, #1
 800227c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227e:	f7fe feb1 	bl	8000fe4 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002286:	f7fe fead 	bl	8000fe4 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e03d      	b.n	8002314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002298:	4b11      	ldr	r3, [pc, #68]	@ (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0f0      	beq.n	8002286 <HAL_RCC_OscConfig+0x46a>
 80022a4:	e035      	b.n	8002312 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a6:	4b10      	ldr	r3, [pc, #64]	@ (80022e8 <HAL_RCC_OscConfig+0x4cc>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ac:	f7fe fe9a 	bl	8000fe4 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b4:	f7fe fe96 	bl	8000fe4 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e026      	b.n	8002314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c6:	4b06      	ldr	r3, [pc, #24]	@ (80022e0 <HAL_RCC_OscConfig+0x4c4>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0x498>
 80022d2:	e01e      	b.n	8002312 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d107      	bne.n	80022ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e019      	b.n	8002314 <HAL_RCC_OscConfig+0x4f8>
 80022e0:	40021000 	.word	0x40021000
 80022e4:	40007000 	.word	0x40007000
 80022e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022ec:	4b0b      	ldr	r3, [pc, #44]	@ (800231c <HAL_RCC_OscConfig+0x500>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d106      	bne.n	800230e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230a:	429a      	cmp	r2, r3
 800230c:	d001      	beq.n	8002312 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e000      	b.n	8002314 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40021000 	.word	0x40021000

08002320 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e0d0      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002334:	4b6a      	ldr	r3, [pc, #424]	@ (80024e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d910      	bls.n	8002364 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002342:	4b67      	ldr	r3, [pc, #412]	@ (80024e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f023 0207 	bic.w	r2, r3, #7
 800234a:	4965      	ldr	r1, [pc, #404]	@ (80024e0 <HAL_RCC_ClockConfig+0x1c0>)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	4313      	orrs	r3, r2
 8002350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002352:	4b63      	ldr	r3, [pc, #396]	@ (80024e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	429a      	cmp	r2, r3
 800235e:	d001      	beq.n	8002364 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e0b8      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d020      	beq.n	80023b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d005      	beq.n	8002388 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800237c:	4b59      	ldr	r3, [pc, #356]	@ (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	4a58      	ldr	r2, [pc, #352]	@ (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002382:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002386:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0308 	and.w	r3, r3, #8
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002394:	4b53      	ldr	r3, [pc, #332]	@ (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	4a52      	ldr	r2, [pc, #328]	@ (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800239e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a0:	4b50      	ldr	r3, [pc, #320]	@ (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	494d      	ldr	r1, [pc, #308]	@ (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d040      	beq.n	8002440 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d107      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c6:	4b47      	ldr	r3, [pc, #284]	@ (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d115      	bne.n	80023fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e07f      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d107      	bne.n	80023ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023de:	4b41      	ldr	r3, [pc, #260]	@ (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d109      	bne.n	80023fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e073      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ee:	4b3d      	ldr	r3, [pc, #244]	@ (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e06b      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023fe:	4b39      	ldr	r3, [pc, #228]	@ (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f023 0203 	bic.w	r2, r3, #3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	4936      	ldr	r1, [pc, #216]	@ (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 800240c:	4313      	orrs	r3, r2
 800240e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002410:	f7fe fde8 	bl	8000fe4 <HAL_GetTick>
 8002414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002416:	e00a      	b.n	800242e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002418:	f7fe fde4 	bl	8000fe4 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002426:	4293      	cmp	r3, r2
 8002428:	d901      	bls.n	800242e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e053      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242e:	4b2d      	ldr	r3, [pc, #180]	@ (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 020c 	and.w	r2, r3, #12
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	429a      	cmp	r2, r3
 800243e:	d1eb      	bne.n	8002418 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002440:	4b27      	ldr	r3, [pc, #156]	@ (80024e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d210      	bcs.n	8002470 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244e:	4b24      	ldr	r3, [pc, #144]	@ (80024e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f023 0207 	bic.w	r2, r3, #7
 8002456:	4922      	ldr	r1, [pc, #136]	@ (80024e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	4313      	orrs	r3, r2
 800245c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800245e:	4b20      	ldr	r3, [pc, #128]	@ (80024e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d001      	beq.n	8002470 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e032      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	2b00      	cmp	r3, #0
 800247a:	d008      	beq.n	800248e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800247c:	4b19      	ldr	r3, [pc, #100]	@ (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	4916      	ldr	r1, [pc, #88]	@ (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 800248a:	4313      	orrs	r3, r2
 800248c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b00      	cmp	r3, #0
 8002498:	d009      	beq.n	80024ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800249a:	4b12      	ldr	r3, [pc, #72]	@ (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	490e      	ldr	r1, [pc, #56]	@ (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024ae:	f000 f821 	bl	80024f4 <HAL_RCC_GetSysClockFreq>
 80024b2:	4602      	mov	r2, r0
 80024b4:	4b0b      	ldr	r3, [pc, #44]	@ (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	091b      	lsrs	r3, r3, #4
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	490a      	ldr	r1, [pc, #40]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 80024c0:	5ccb      	ldrb	r3, [r1, r3]
 80024c2:	fa22 f303 	lsr.w	r3, r2, r3
 80024c6:	4a09      	ldr	r2, [pc, #36]	@ (80024ec <HAL_RCC_ClockConfig+0x1cc>)
 80024c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024ca:	4b09      	ldr	r3, [pc, #36]	@ (80024f0 <HAL_RCC_ClockConfig+0x1d0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe fd46 	bl	8000f60 <HAL_InitTick>

  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40022000 	.word	0x40022000
 80024e4:	40021000 	.word	0x40021000
 80024e8:	08004740 	.word	0x08004740
 80024ec:	20000000 	.word	0x20000000
 80024f0:	20000004 	.word	0x20000004

080024f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b087      	sub	sp, #28
 80024f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	2300      	movs	r3, #0
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
 8002506:	2300      	movs	r3, #0
 8002508:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800250a:	2300      	movs	r3, #0
 800250c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800250e:	4b1e      	ldr	r3, [pc, #120]	@ (8002588 <HAL_RCC_GetSysClockFreq+0x94>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f003 030c 	and.w	r3, r3, #12
 800251a:	2b04      	cmp	r3, #4
 800251c:	d002      	beq.n	8002524 <HAL_RCC_GetSysClockFreq+0x30>
 800251e:	2b08      	cmp	r3, #8
 8002520:	d003      	beq.n	800252a <HAL_RCC_GetSysClockFreq+0x36>
 8002522:	e027      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002524:	4b19      	ldr	r3, [pc, #100]	@ (800258c <HAL_RCC_GetSysClockFreq+0x98>)
 8002526:	613b      	str	r3, [r7, #16]
      break;
 8002528:	e027      	b.n	800257a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	0c9b      	lsrs	r3, r3, #18
 800252e:	f003 030f 	and.w	r3, r3, #15
 8002532:	4a17      	ldr	r2, [pc, #92]	@ (8002590 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002534:	5cd3      	ldrb	r3, [r2, r3]
 8002536:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d010      	beq.n	8002564 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002542:	4b11      	ldr	r3, [pc, #68]	@ (8002588 <HAL_RCC_GetSysClockFreq+0x94>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	0c5b      	lsrs	r3, r3, #17
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	4a11      	ldr	r2, [pc, #68]	@ (8002594 <HAL_RCC_GetSysClockFreq+0xa0>)
 800254e:	5cd3      	ldrb	r3, [r2, r3]
 8002550:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a0d      	ldr	r2, [pc, #52]	@ (800258c <HAL_RCC_GetSysClockFreq+0x98>)
 8002556:	fb03 f202 	mul.w	r2, r3, r2
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	e004      	b.n	800256e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a0c      	ldr	r2, [pc, #48]	@ (8002598 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002568:	fb02 f303 	mul.w	r3, r2, r3
 800256c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	613b      	str	r3, [r7, #16]
      break;
 8002572:	e002      	b.n	800257a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002574:	4b05      	ldr	r3, [pc, #20]	@ (800258c <HAL_RCC_GetSysClockFreq+0x98>)
 8002576:	613b      	str	r3, [r7, #16]
      break;
 8002578:	bf00      	nop
    }
  }
  return sysclockfreq;
 800257a:	693b      	ldr	r3, [r7, #16]
}
 800257c:	4618      	mov	r0, r3
 800257e:	371c      	adds	r7, #28
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	40021000 	.word	0x40021000
 800258c:	007a1200 	.word	0x007a1200
 8002590:	08004758 	.word	0x08004758
 8002594:	08004768 	.word	0x08004768
 8002598:	003d0900 	.word	0x003d0900

0800259c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025a0:	4b02      	ldr	r3, [pc, #8]	@ (80025ac <HAL_RCC_GetHCLKFreq+0x10>)
 80025a2:	681b      	ldr	r3, [r3, #0]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr
 80025ac:	20000000 	.word	0x20000000

080025b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025b4:	f7ff fff2 	bl	800259c <HAL_RCC_GetHCLKFreq>
 80025b8:	4602      	mov	r2, r0
 80025ba:	4b05      	ldr	r3, [pc, #20]	@ (80025d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	0a1b      	lsrs	r3, r3, #8
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	4903      	ldr	r1, [pc, #12]	@ (80025d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025c6:	5ccb      	ldrb	r3, [r1, r3]
 80025c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40021000 	.word	0x40021000
 80025d4:	08004750 	.word	0x08004750

080025d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025dc:	f7ff ffde 	bl	800259c <HAL_RCC_GetHCLKFreq>
 80025e0:	4602      	mov	r2, r0
 80025e2:	4b05      	ldr	r3, [pc, #20]	@ (80025f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	0adb      	lsrs	r3, r3, #11
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	4903      	ldr	r1, [pc, #12]	@ (80025fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80025ee:	5ccb      	ldrb	r3, [r1, r3]
 80025f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40021000 	.word	0x40021000
 80025fc:	08004750 	.word	0x08004750

08002600 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002608:	4b0a      	ldr	r3, [pc, #40]	@ (8002634 <RCC_Delay+0x34>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a0a      	ldr	r2, [pc, #40]	@ (8002638 <RCC_Delay+0x38>)
 800260e:	fba2 2303 	umull	r2, r3, r2, r3
 8002612:	0a5b      	lsrs	r3, r3, #9
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	fb02 f303 	mul.w	r3, r2, r3
 800261a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800261c:	bf00      	nop
  }
  while (Delay --);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	1e5a      	subs	r2, r3, #1
 8002622:	60fa      	str	r2, [r7, #12]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1f9      	bne.n	800261c <RCC_Delay+0x1c>
}
 8002628:	bf00      	nop
 800262a:	bf00      	nop
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr
 8002634:	20000000 	.word	0x20000000
 8002638:	10624dd3 	.word	0x10624dd3

0800263c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002644:	2300      	movs	r3, #0
 8002646:	613b      	str	r3, [r7, #16]
 8002648:	2300      	movs	r3, #0
 800264a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b00      	cmp	r3, #0
 8002656:	d07d      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002658:	2300      	movs	r3, #0
 800265a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800265c:	4b4f      	ldr	r3, [pc, #316]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10d      	bne.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002668:	4b4c      	ldr	r3, [pc, #304]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800266a:	69db      	ldr	r3, [r3, #28]
 800266c:	4a4b      	ldr	r2, [pc, #300]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800266e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002672:	61d3      	str	r3, [r2, #28]
 8002674:	4b49      	ldr	r3, [pc, #292]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800267c:	60bb      	str	r3, [r7, #8]
 800267e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002680:	2301      	movs	r3, #1
 8002682:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002684:	4b46      	ldr	r3, [pc, #280]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800268c:	2b00      	cmp	r3, #0
 800268e:	d118      	bne.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002690:	4b43      	ldr	r3, [pc, #268]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a42      	ldr	r2, [pc, #264]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002696:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800269a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800269c:	f7fe fca2 	bl	8000fe4 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a2:	e008      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a4:	f7fe fc9e 	bl	8000fe4 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b64      	cmp	r3, #100	@ 0x64
 80026b0:	d901      	bls.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e06d      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b6:	4b3a      	ldr	r3, [pc, #232]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0f0      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026c2:	4b36      	ldr	r3, [pc, #216]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026ca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d02e      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d027      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026e0:	4b2e      	ldr	r3, [pc, #184]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026ea:	4b2e      	ldr	r3, [pc, #184]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026f0:	4b2c      	ldr	r3, [pc, #176]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026f6:	4a29      	ldr	r2, [pc, #164]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d014      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002706:	f7fe fc6d 	bl	8000fe4 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800270c:	e00a      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270e:	f7fe fc69 	bl	8000fe4 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	f241 3288 	movw	r2, #5000	@ 0x1388
 800271c:	4293      	cmp	r3, r2
 800271e:	d901      	bls.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e036      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002724:	4b1d      	ldr	r3, [pc, #116]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0ee      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002730:	4b1a      	ldr	r3, [pc, #104]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	4917      	ldr	r1, [pc, #92]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800273e:	4313      	orrs	r3, r2
 8002740:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002742:	7dfb      	ldrb	r3, [r7, #23]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d105      	bne.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002748:	4b14      	ldr	r3, [pc, #80]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	4a13      	ldr	r2, [pc, #76]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800274e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002752:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002760:	4b0e      	ldr	r3, [pc, #56]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	490b      	ldr	r1, [pc, #44]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800276e:	4313      	orrs	r3, r2
 8002770:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0310 	and.w	r3, r3, #16
 800277a:	2b00      	cmp	r3, #0
 800277c:	d008      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800277e:	4b07      	ldr	r3, [pc, #28]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	4904      	ldr	r1, [pc, #16]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800278c:	4313      	orrs	r3, r2
 800278e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3718      	adds	r7, #24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40021000 	.word	0x40021000
 80027a0:	40007000 	.word	0x40007000
 80027a4:	42420440 	.word	0x42420440

080027a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b088      	sub	sp, #32
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	2300      	movs	r3, #0
 80027b6:	61fb      	str	r3, [r7, #28]
 80027b8:	2300      	movs	r3, #0
 80027ba:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	2300      	movs	r3, #0
 80027c2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b10      	cmp	r3, #16
 80027c8:	d00a      	beq.n	80027e0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b10      	cmp	r3, #16
 80027ce:	f200 808a 	bhi.w	80028e6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d045      	beq.n	8002864 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d075      	beq.n	80028ca <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80027de:	e082      	b.n	80028e6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80027e0:	4b46      	ldr	r3, [pc, #280]	@ (80028fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80027e6:	4b45      	ldr	r3, [pc, #276]	@ (80028fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d07b      	beq.n	80028ea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	0c9b      	lsrs	r3, r3, #18
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	4a41      	ldr	r2, [pc, #260]	@ (8002900 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80027fc:	5cd3      	ldrb	r3, [r2, r3]
 80027fe:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d015      	beq.n	8002836 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800280a:	4b3c      	ldr	r3, [pc, #240]	@ (80028fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	0c5b      	lsrs	r3, r3, #17
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	4a3b      	ldr	r2, [pc, #236]	@ (8002904 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002816:	5cd3      	ldrb	r3, [r2, r3]
 8002818:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00d      	beq.n	8002840 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002824:	4a38      	ldr	r2, [pc, #224]	@ (8002908 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	fbb2 f2f3 	udiv	r2, r2, r3
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	fb02 f303 	mul.w	r3, r2, r3
 8002832:	61fb      	str	r3, [r7, #28]
 8002834:	e004      	b.n	8002840 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4a34      	ldr	r2, [pc, #208]	@ (800290c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800283a:	fb02 f303 	mul.w	r3, r2, r3
 800283e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002840:	4b2e      	ldr	r3, [pc, #184]	@ (80028fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002848:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800284c:	d102      	bne.n	8002854 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	61bb      	str	r3, [r7, #24]
      break;
 8002852:	e04a      	b.n	80028ea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	4a2d      	ldr	r2, [pc, #180]	@ (8002910 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800285a:	fba2 2303 	umull	r2, r3, r2, r3
 800285e:	085b      	lsrs	r3, r3, #1
 8002860:	61bb      	str	r3, [r7, #24]
      break;
 8002862:	e042      	b.n	80028ea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002864:	4b25      	ldr	r3, [pc, #148]	@ (80028fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002870:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002874:	d108      	bne.n	8002888 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d003      	beq.n	8002888 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002880:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002884:	61bb      	str	r3, [r7, #24]
 8002886:	e01f      	b.n	80028c8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800288e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002892:	d109      	bne.n	80028a8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002894:	4b19      	ldr	r3, [pc, #100]	@ (80028fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80028a0:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80028a4:	61bb      	str	r3, [r7, #24]
 80028a6:	e00f      	b.n	80028c8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80028b2:	d11c      	bne.n	80028ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80028b4:	4b11      	ldr	r3, [pc, #68]	@ (80028fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d016      	beq.n	80028ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80028c0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80028c4:	61bb      	str	r3, [r7, #24]
      break;
 80028c6:	e012      	b.n	80028ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80028c8:	e011      	b.n	80028ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80028ca:	f7ff fe85 	bl	80025d8 <HAL_RCC_GetPCLK2Freq>
 80028ce:	4602      	mov	r2, r0
 80028d0:	4b0a      	ldr	r3, [pc, #40]	@ (80028fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	0b9b      	lsrs	r3, r3, #14
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	3301      	adds	r3, #1
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e2:	61bb      	str	r3, [r7, #24]
      break;
 80028e4:	e004      	b.n	80028f0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80028e6:	bf00      	nop
 80028e8:	e002      	b.n	80028f0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80028ea:	bf00      	nop
 80028ec:	e000      	b.n	80028f0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80028ee:	bf00      	nop
    }
  }
  return (frequency);
 80028f0:	69bb      	ldr	r3, [r7, #24]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3720      	adds	r7, #32
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40021000 	.word	0x40021000
 8002900:	0800476c 	.word	0x0800476c
 8002904:	0800477c 	.word	0x0800477c
 8002908:	007a1200 	.word	0x007a1200
 800290c:	003d0900 	.word	0x003d0900
 8002910:	aaaaaaab 	.word	0xaaaaaaab

08002914 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e041      	b.n	80029aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d106      	bne.n	8002940 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7fe f900 	bl	8000b40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2202      	movs	r2, #2
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3304      	adds	r3, #4
 8002950:	4619      	mov	r1, r3
 8002952:	4610      	mov	r0, r2
 8002954:	f000 fcb2 	bl	80032bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
	...

080029b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d001      	beq.n	80029cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e032      	b.n	8002a32 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2202      	movs	r2, #2
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a18      	ldr	r2, [pc, #96]	@ (8002a3c <HAL_TIM_Base_Start+0x88>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d00e      	beq.n	80029fc <HAL_TIM_Base_Start+0x48>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029e6:	d009      	beq.n	80029fc <HAL_TIM_Base_Start+0x48>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a14      	ldr	r2, [pc, #80]	@ (8002a40 <HAL_TIM_Base_Start+0x8c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d004      	beq.n	80029fc <HAL_TIM_Base_Start+0x48>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a13      	ldr	r2, [pc, #76]	@ (8002a44 <HAL_TIM_Base_Start+0x90>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d111      	bne.n	8002a20 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2b06      	cmp	r3, #6
 8002a0c:	d010      	beq.n	8002a30 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f042 0201 	orr.w	r2, r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a1e:	e007      	b.n	8002a30 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0201 	orr.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr
 8002a3c:	40012c00 	.word	0x40012c00
 8002a40:	40000400 	.word	0x40000400
 8002a44:	40000800 	.word	0x40000800

08002a48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d001      	beq.n	8002a60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e03a      	b.n	8002ad6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2202      	movs	r2, #2
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0201 	orr.w	r2, r2, #1
 8002a76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a18      	ldr	r2, [pc, #96]	@ (8002ae0 <HAL_TIM_Base_Start_IT+0x98>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d00e      	beq.n	8002aa0 <HAL_TIM_Base_Start_IT+0x58>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a8a:	d009      	beq.n	8002aa0 <HAL_TIM_Base_Start_IT+0x58>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a14      	ldr	r2, [pc, #80]	@ (8002ae4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d004      	beq.n	8002aa0 <HAL_TIM_Base_Start_IT+0x58>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a13      	ldr	r2, [pc, #76]	@ (8002ae8 <HAL_TIM_Base_Start_IT+0xa0>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d111      	bne.n	8002ac4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2b06      	cmp	r3, #6
 8002ab0:	d010      	beq.n	8002ad4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f042 0201 	orr.w	r2, r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac2:	e007      	b.n	8002ad4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 0201 	orr.w	r2, r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr
 8002ae0:	40012c00 	.word	0x40012c00
 8002ae4:	40000400 	.word	0x40000400
 8002ae8:	40000800 	.word	0x40000800

08002aec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68da      	ldr	r2, [r3, #12]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 0201 	bic.w	r2, r2, #1
 8002b02:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6a1a      	ldr	r2, [r3, #32]
 8002b0a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10f      	bne.n	8002b34 <HAL_TIM_Base_Stop_IT+0x48>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6a1a      	ldr	r2, [r3, #32]
 8002b1a:	f240 4344 	movw	r3, #1092	@ 0x444
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d107      	bne.n	8002b34 <HAL_TIM_Base_Stop_IT+0x48>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0201 	bic.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr

08002b48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e041      	b.n	8002bde <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d106      	bne.n	8002b74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f839 	bl	8002be6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2202      	movs	r2, #2
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3304      	adds	r3, #4
 8002b84:	4619      	mov	r1, r3
 8002b86:	4610      	mov	r0, r2
 8002b88:	f000 fb98 	bl	80032bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e041      	b.n	8002c90 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d106      	bne.n	8002c26 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 f839 	bl	8002c98 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2202      	movs	r2, #2
 8002c2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	3304      	adds	r3, #4
 8002c36:	4619      	mov	r1, r3
 8002c38:	4610      	mov	r0, r2
 8002c3a:	f000 fb3f 	bl	80032bc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0208 	bic.w	r2, r2, #8
 8002c4c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6819      	ldr	r1, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr
	...

08002cac <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002cbc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002cc4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ccc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002cd4:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d108      	bne.n	8002cee <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002cdc:	7bbb      	ldrb	r3, [r7, #14]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d105      	bne.n	8002cee <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ce2:	7b7b      	ldrb	r3, [r7, #13]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d102      	bne.n	8002cee <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ce8:	7b3b      	ldrb	r3, [r7, #12]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d001      	beq.n	8002cf2 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e03b      	b.n	8002d6a <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2202      	movs	r2, #2
 8002d06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 0202 	orr.w	r2, r2, #2
 8002d20:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68da      	ldr	r2, [r3, #12]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f042 0204 	orr.w	r2, r2, #4
 8002d30:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2201      	movs	r2, #1
 8002d38:	2100      	movs	r1, #0
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 fd4a 	bl	80037d4 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2201      	movs	r2, #1
 8002d46:	2104      	movs	r1, #4
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 fd43 	bl	80037d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a08      	ldr	r2, [pc, #32]	@ (8002d74 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d107      	bne.n	8002d68 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d66:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40012c00 	.word	0x40012c00

08002d78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d020      	beq.n	8002ddc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d01b      	beq.n	8002ddc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f06f 0202 	mvn.w	r2, #2
 8002dac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	f003 0303 	and.w	r3, r3, #3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 fa5a 	bl	800327c <HAL_TIM_IC_CaptureCallback>
 8002dc8:	e005      	b.n	8002dd6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 fa4d 	bl	800326a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7fd fe0f 	bl	80009f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	f003 0304 	and.w	r3, r3, #4
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d020      	beq.n	8002e28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d01b      	beq.n	8002e28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f06f 0204 	mvn.w	r2, #4
 8002df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 fa34 	bl	800327c <HAL_TIM_IC_CaptureCallback>
 8002e14:	e005      	b.n	8002e22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 fa27 	bl	800326a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f7fd fde9 	bl	80009f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d020      	beq.n	8002e74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d01b      	beq.n	8002e74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f06f 0208 	mvn.w	r2, #8
 8002e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2204      	movs	r2, #4
 8002e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fa0e 	bl	800327c <HAL_TIM_IC_CaptureCallback>
 8002e60:	e005      	b.n	8002e6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 fa01 	bl	800326a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7fd fdc3 	bl	80009f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	f003 0310 	and.w	r3, r3, #16
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d020      	beq.n	8002ec0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f003 0310 	and.w	r3, r3, #16
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d01b      	beq.n	8002ec0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f06f 0210 	mvn.w	r2, #16
 8002e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2208      	movs	r2, #8
 8002e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f9e8 	bl	800327c <HAL_TIM_IC_CaptureCallback>
 8002eac:	e005      	b.n	8002eba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f9db 	bl	800326a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7fd fd9d 	bl	80009f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00c      	beq.n	8002ee4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d007      	beq.n	8002ee4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f06f 0201 	mvn.w	r2, #1
 8002edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7fd fd62 	bl	80009a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00c      	beq.n	8002f08 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d007      	beq.n	8002f08 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 fcf1 	bl	80038ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00c      	beq.n	8002f2c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d007      	beq.n	8002f2c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f9b1 	bl	800328e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f003 0320 	and.w	r3, r3, #32
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00c      	beq.n	8002f50 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f003 0320 	and.w	r3, r3, #32
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d007      	beq.n	8002f50 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f06f 0220 	mvn.w	r2, #32
 8002f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 fcc4 	bl	80038d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f50:	bf00      	nop
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f64:	2300      	movs	r3, #0
 8002f66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d101      	bne.n	8002f76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f72:	2302      	movs	r3, #2
 8002f74:	e0ae      	b.n	80030d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b0c      	cmp	r3, #12
 8002f82:	f200 809f 	bhi.w	80030c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f86:	a201      	add	r2, pc, #4	@ (adr r2, 8002f8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8c:	08002fc1 	.word	0x08002fc1
 8002f90:	080030c5 	.word	0x080030c5
 8002f94:	080030c5 	.word	0x080030c5
 8002f98:	080030c5 	.word	0x080030c5
 8002f9c:	08003001 	.word	0x08003001
 8002fa0:	080030c5 	.word	0x080030c5
 8002fa4:	080030c5 	.word	0x080030c5
 8002fa8:	080030c5 	.word	0x080030c5
 8002fac:	08003043 	.word	0x08003043
 8002fb0:	080030c5 	.word	0x080030c5
 8002fb4:	080030c5 	.word	0x080030c5
 8002fb8:	080030c5 	.word	0x080030c5
 8002fbc:	08003083 	.word	0x08003083
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68b9      	ldr	r1, [r7, #8]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 f9e6 	bl	8003398 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	699a      	ldr	r2, [r3, #24]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0208 	orr.w	r2, r2, #8
 8002fda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699a      	ldr	r2, [r3, #24]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0204 	bic.w	r2, r2, #4
 8002fea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6999      	ldr	r1, [r3, #24]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	691a      	ldr	r2, [r3, #16]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	619a      	str	r2, [r3, #24]
      break;
 8002ffe:	e064      	b.n	80030ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68b9      	ldr	r1, [r7, #8]
 8003006:	4618      	mov	r0, r3
 8003008:	f000 fa2c 	bl	8003464 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	699a      	ldr	r2, [r3, #24]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800301a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	699a      	ldr	r2, [r3, #24]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800302a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6999      	ldr	r1, [r3, #24]
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	021a      	lsls	r2, r3, #8
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	619a      	str	r2, [r3, #24]
      break;
 8003040:	e043      	b.n	80030ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68b9      	ldr	r1, [r7, #8]
 8003048:	4618      	mov	r0, r3
 800304a:	f000 fa75 	bl	8003538 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	69da      	ldr	r2, [r3, #28]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f042 0208 	orr.w	r2, r2, #8
 800305c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	69da      	ldr	r2, [r3, #28]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 0204 	bic.w	r2, r2, #4
 800306c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	69d9      	ldr	r1, [r3, #28]
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	691a      	ldr	r2, [r3, #16]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	61da      	str	r2, [r3, #28]
      break;
 8003080:	e023      	b.n	80030ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68b9      	ldr	r1, [r7, #8]
 8003088:	4618      	mov	r0, r3
 800308a:	f000 fabf 	bl	800360c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	69da      	ldr	r2, [r3, #28]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800309c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	69da      	ldr	r2, [r3, #28]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	69d9      	ldr	r1, [r3, #28]
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	021a      	lsls	r2, r3, #8
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	61da      	str	r2, [r3, #28]
      break;
 80030c2:	e002      	b.n	80030ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	75fb      	strb	r3, [r7, #23]
      break;
 80030c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80030d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030e6:	2300      	movs	r3, #0
 80030e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d101      	bne.n	80030f8 <HAL_TIM_ConfigClockSource+0x1c>
 80030f4:	2302      	movs	r3, #2
 80030f6:	e0b4      	b.n	8003262 <HAL_TIM_ConfigClockSource+0x186>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003116:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800311e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003130:	d03e      	beq.n	80031b0 <HAL_TIM_ConfigClockSource+0xd4>
 8003132:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003136:	f200 8087 	bhi.w	8003248 <HAL_TIM_ConfigClockSource+0x16c>
 800313a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800313e:	f000 8086 	beq.w	800324e <HAL_TIM_ConfigClockSource+0x172>
 8003142:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003146:	d87f      	bhi.n	8003248 <HAL_TIM_ConfigClockSource+0x16c>
 8003148:	2b70      	cmp	r3, #112	@ 0x70
 800314a:	d01a      	beq.n	8003182 <HAL_TIM_ConfigClockSource+0xa6>
 800314c:	2b70      	cmp	r3, #112	@ 0x70
 800314e:	d87b      	bhi.n	8003248 <HAL_TIM_ConfigClockSource+0x16c>
 8003150:	2b60      	cmp	r3, #96	@ 0x60
 8003152:	d050      	beq.n	80031f6 <HAL_TIM_ConfigClockSource+0x11a>
 8003154:	2b60      	cmp	r3, #96	@ 0x60
 8003156:	d877      	bhi.n	8003248 <HAL_TIM_ConfigClockSource+0x16c>
 8003158:	2b50      	cmp	r3, #80	@ 0x50
 800315a:	d03c      	beq.n	80031d6 <HAL_TIM_ConfigClockSource+0xfa>
 800315c:	2b50      	cmp	r3, #80	@ 0x50
 800315e:	d873      	bhi.n	8003248 <HAL_TIM_ConfigClockSource+0x16c>
 8003160:	2b40      	cmp	r3, #64	@ 0x40
 8003162:	d058      	beq.n	8003216 <HAL_TIM_ConfigClockSource+0x13a>
 8003164:	2b40      	cmp	r3, #64	@ 0x40
 8003166:	d86f      	bhi.n	8003248 <HAL_TIM_ConfigClockSource+0x16c>
 8003168:	2b30      	cmp	r3, #48	@ 0x30
 800316a:	d064      	beq.n	8003236 <HAL_TIM_ConfigClockSource+0x15a>
 800316c:	2b30      	cmp	r3, #48	@ 0x30
 800316e:	d86b      	bhi.n	8003248 <HAL_TIM_ConfigClockSource+0x16c>
 8003170:	2b20      	cmp	r3, #32
 8003172:	d060      	beq.n	8003236 <HAL_TIM_ConfigClockSource+0x15a>
 8003174:	2b20      	cmp	r3, #32
 8003176:	d867      	bhi.n	8003248 <HAL_TIM_ConfigClockSource+0x16c>
 8003178:	2b00      	cmp	r3, #0
 800317a:	d05c      	beq.n	8003236 <HAL_TIM_ConfigClockSource+0x15a>
 800317c:	2b10      	cmp	r3, #16
 800317e:	d05a      	beq.n	8003236 <HAL_TIM_ConfigClockSource+0x15a>
 8003180:	e062      	b.n	8003248 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003192:	f000 fb00 	bl	8003796 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80031a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	609a      	str	r2, [r3, #8]
      break;
 80031ae:	e04f      	b.n	8003250 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031c0:	f000 fae9 	bl	8003796 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031d2:	609a      	str	r2, [r3, #8]
      break;
 80031d4:	e03c      	b.n	8003250 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031e2:	461a      	mov	r2, r3
 80031e4:	f000 fa60 	bl	80036a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2150      	movs	r1, #80	@ 0x50
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 fab7 	bl	8003762 <TIM_ITRx_SetConfig>
      break;
 80031f4:	e02c      	b.n	8003250 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003202:	461a      	mov	r2, r3
 8003204:	f000 fa7e 	bl	8003704 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2160      	movs	r1, #96	@ 0x60
 800320e:	4618      	mov	r0, r3
 8003210:	f000 faa7 	bl	8003762 <TIM_ITRx_SetConfig>
      break;
 8003214:	e01c      	b.n	8003250 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003222:	461a      	mov	r2, r3
 8003224:	f000 fa40 	bl	80036a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2140      	movs	r1, #64	@ 0x40
 800322e:	4618      	mov	r0, r3
 8003230:	f000 fa97 	bl	8003762 <TIM_ITRx_SetConfig>
      break;
 8003234:	e00c      	b.n	8003250 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4619      	mov	r1, r3
 8003240:	4610      	mov	r0, r2
 8003242:	f000 fa8e 	bl	8003762 <TIM_ITRx_SetConfig>
      break;
 8003246:	e003      	b.n	8003250 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	73fb      	strb	r3, [r7, #15]
      break;
 800324c:	e000      	b.n	8003250 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800324e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003260:	7bfb      	ldrb	r3, [r7, #15]
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr

0800327c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	bc80      	pop	{r7}
 800328c:	4770      	bx	lr

0800328e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr

080032a0 <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(const TIM_HandleTypeDef *htim)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  return htim->State;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032ae:	b2db      	uxtb	r3, r3
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc80      	pop	{r7}
 80032b8:	4770      	bx	lr
	...

080032bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a2f      	ldr	r2, [pc, #188]	@ (800338c <TIM_Base_SetConfig+0xd0>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d00b      	beq.n	80032ec <TIM_Base_SetConfig+0x30>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032da:	d007      	beq.n	80032ec <TIM_Base_SetConfig+0x30>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a2c      	ldr	r2, [pc, #176]	@ (8003390 <TIM_Base_SetConfig+0xd4>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d003      	beq.n	80032ec <TIM_Base_SetConfig+0x30>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a2b      	ldr	r2, [pc, #172]	@ (8003394 <TIM_Base_SetConfig+0xd8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d108      	bne.n	80032fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a22      	ldr	r2, [pc, #136]	@ (800338c <TIM_Base_SetConfig+0xd0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d00b      	beq.n	800331e <TIM_Base_SetConfig+0x62>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800330c:	d007      	beq.n	800331e <TIM_Base_SetConfig+0x62>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a1f      	ldr	r2, [pc, #124]	@ (8003390 <TIM_Base_SetConfig+0xd4>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d003      	beq.n	800331e <TIM_Base_SetConfig+0x62>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a1e      	ldr	r2, [pc, #120]	@ (8003394 <TIM_Base_SetConfig+0xd8>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d108      	bne.n	8003330 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003324:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4313      	orrs	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	4313      	orrs	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a0d      	ldr	r2, [pc, #52]	@ (800338c <TIM_Base_SetConfig+0xd0>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d103      	bne.n	8003364 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	691a      	ldr	r2, [r3, #16]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d005      	beq.n	8003382 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f023 0201 	bic.w	r2, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	611a      	str	r2, [r3, #16]
  }
}
 8003382:	bf00      	nop
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr
 800338c:	40012c00 	.word	0x40012c00
 8003390:	40000400 	.word	0x40000400
 8003394:	40000800 	.word	0x40000800

08003398 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003398:	b480      	push	{r7}
 800339a:	b087      	sub	sp, #28
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	f023 0201 	bic.w	r2, r3, #1
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f023 0303 	bic.w	r3, r3, #3
 80033ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f023 0302 	bic.w	r3, r3, #2
 80033e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a1c      	ldr	r2, [pc, #112]	@ (8003460 <TIM_OC1_SetConfig+0xc8>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d10c      	bne.n	800340e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f023 0308 	bic.w	r3, r3, #8
 80033fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	4313      	orrs	r3, r2
 8003404:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f023 0304 	bic.w	r3, r3, #4
 800340c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a13      	ldr	r2, [pc, #76]	@ (8003460 <TIM_OC1_SetConfig+0xc8>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d111      	bne.n	800343a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800341c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003424:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	4313      	orrs	r3, r2
 800342e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	4313      	orrs	r3, r2
 8003438:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	621a      	str	r2, [r3, #32]
}
 8003454:	bf00      	nop
 8003456:	371c      	adds	r7, #28
 8003458:	46bd      	mov	sp, r7
 800345a:	bc80      	pop	{r7}
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	40012c00 	.word	0x40012c00

08003464 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003464:	b480      	push	{r7}
 8003466:	b087      	sub	sp, #28
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	f023 0210 	bic.w	r2, r3, #16
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800349a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	021b      	lsls	r3, r3, #8
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f023 0320 	bic.w	r3, r3, #32
 80034ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a1d      	ldr	r2, [pc, #116]	@ (8003534 <TIM_OC2_SetConfig+0xd0>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d10d      	bne.n	80034e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a14      	ldr	r2, [pc, #80]	@ (8003534 <TIM_OC2_SetConfig+0xd0>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d113      	bne.n	8003510 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80034f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	4313      	orrs	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	4313      	orrs	r3, r2
 800350e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	621a      	str	r2, [r3, #32]
}
 800352a:	bf00      	nop
 800352c:	371c      	adds	r7, #28
 800352e:	46bd      	mov	sp, r7
 8003530:	bc80      	pop	{r7}
 8003532:	4770      	bx	lr
 8003534:	40012c00 	.word	0x40012c00

08003538 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003538:	b480      	push	{r7}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f023 0303 	bic.w	r3, r3, #3
 800356e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	4313      	orrs	r3, r2
 8003578:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003580:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	021b      	lsls	r3, r3, #8
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	4313      	orrs	r3, r2
 800358c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a1d      	ldr	r2, [pc, #116]	@ (8003608 <TIM_OC3_SetConfig+0xd0>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d10d      	bne.n	80035b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800359c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	021b      	lsls	r3, r3, #8
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80035b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a14      	ldr	r2, [pc, #80]	@ (8003608 <TIM_OC3_SetConfig+0xd0>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d113      	bne.n	80035e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80035c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80035c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	011b      	lsls	r3, r3, #4
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	4313      	orrs	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	621a      	str	r2, [r3, #32]
}
 80035fc:	bf00      	nop
 80035fe:	371c      	adds	r7, #28
 8003600:	46bd      	mov	sp, r7
 8003602:	bc80      	pop	{r7}
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40012c00 	.word	0x40012c00

0800360c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800360c:	b480      	push	{r7}
 800360e:	b087      	sub	sp, #28
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800363a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003642:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	021b      	lsls	r3, r3, #8
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	4313      	orrs	r3, r2
 800364e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003656:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	031b      	lsls	r3, r3, #12
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	4313      	orrs	r3, r2
 8003662:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a0f      	ldr	r2, [pc, #60]	@ (80036a4 <TIM_OC4_SetConfig+0x98>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d109      	bne.n	8003680 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003672:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	019b      	lsls	r3, r3, #6
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	4313      	orrs	r3, r2
 800367e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	621a      	str	r2, [r3, #32]
}
 800369a:	bf00      	nop
 800369c:	371c      	adds	r7, #28
 800369e:	46bd      	mov	sp, r7
 80036a0:	bc80      	pop	{r7}
 80036a2:	4770      	bx	lr
 80036a4:	40012c00 	.word	0x40012c00

080036a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b087      	sub	sp, #28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	f023 0201 	bic.w	r2, r3, #1
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	011b      	lsls	r3, r3, #4
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	4313      	orrs	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f023 030a 	bic.w	r3, r3, #10
 80036e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	621a      	str	r2, [r3, #32]
}
 80036fa:	bf00      	nop
 80036fc:	371c      	adds	r7, #28
 80036fe:	46bd      	mov	sp, r7
 8003700:	bc80      	pop	{r7}
 8003702:	4770      	bx	lr

08003704 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	f023 0210 	bic.w	r2, r3, #16
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800372e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	031b      	lsls	r3, r3, #12
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	4313      	orrs	r3, r2
 8003738:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003740:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	011b      	lsls	r3, r3, #4
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	4313      	orrs	r3, r2
 800374a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	621a      	str	r2, [r3, #32]
}
 8003758:	bf00      	nop
 800375a:	371c      	adds	r7, #28
 800375c:	46bd      	mov	sp, r7
 800375e:	bc80      	pop	{r7}
 8003760:	4770      	bx	lr

08003762 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003762:	b480      	push	{r7}
 8003764:	b085      	sub	sp, #20
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
 800376a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003778:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4313      	orrs	r3, r2
 8003780:	f043 0307 	orr.w	r3, r3, #7
 8003784:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	609a      	str	r2, [r3, #8]
}
 800378c:	bf00      	nop
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr

08003796 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003796:	b480      	push	{r7}
 8003798:	b087      	sub	sp, #28
 800379a:	af00      	add	r7, sp, #0
 800379c:	60f8      	str	r0, [r7, #12]
 800379e:	60b9      	str	r1, [r7, #8]
 80037a0:	607a      	str	r2, [r7, #4]
 80037a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	021a      	lsls	r2, r3, #8
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	431a      	orrs	r2, r3
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	4313      	orrs	r3, r2
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	609a      	str	r2, [r3, #8]
}
 80037ca:	bf00      	nop
 80037cc:	371c      	adds	r7, #28
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bc80      	pop	{r7}
 80037d2:	4770      	bx	lr

080037d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b087      	sub	sp, #28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f003 031f 	and.w	r3, r3, #31
 80037e6:	2201      	movs	r2, #1
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6a1a      	ldr	r2, [r3, #32]
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	43db      	mvns	r3, r3
 80037f6:	401a      	ands	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6a1a      	ldr	r2, [r3, #32]
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	f003 031f 	and.w	r3, r3, #31
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	fa01 f303 	lsl.w	r3, r1, r3
 800380c:	431a      	orrs	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	621a      	str	r2, [r3, #32]
}
 8003812:	bf00      	nop
 8003814:	371c      	adds	r7, #28
 8003816:	46bd      	mov	sp, r7
 8003818:	bc80      	pop	{r7}
 800381a:	4770      	bx	lr

0800381c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800382c:	2b01      	cmp	r3, #1
 800382e:	d101      	bne.n	8003834 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003830:	2302      	movs	r3, #2
 8003832:	e046      	b.n	80038c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2202      	movs	r2, #2
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800385a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	4313      	orrs	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a16      	ldr	r2, [pc, #88]	@ (80038cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d00e      	beq.n	8003896 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003880:	d009      	beq.n	8003896 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a12      	ldr	r2, [pc, #72]	@ (80038d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d004      	beq.n	8003896 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a10      	ldr	r2, [pc, #64]	@ (80038d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d10c      	bne.n	80038b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800389c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3714      	adds	r7, #20
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bc80      	pop	{r7}
 80038ca:	4770      	bx	lr
 80038cc:	40012c00 	.word	0x40012c00
 80038d0:	40000400 	.word	0x40000400
 80038d4:	40000800 	.word	0x40000800

080038d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bc80      	pop	{r7}
 80038e8:	4770      	bx	lr

080038ea <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038ea:	b480      	push	{r7}
 80038ec:	b083      	sub	sp, #12
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr

080038fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e042      	b.n	8003994 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d106      	bne.n	8003928 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7fd f9b4 	bl	8000c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2224      	movs	r2, #36	@ 0x24
 800392c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800393e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 f971 	bl	8003c28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	691a      	ldr	r2, [r3, #16]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003954:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	695a      	ldr	r2, [r3, #20]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003964:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68da      	ldr	r2, [r3, #12]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003974:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2220      	movs	r2, #32
 8003980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2220      	movs	r2, #32
 8003988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08a      	sub	sp, #40	@ 0x28
 80039a0:	af02      	add	r7, sp, #8
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	603b      	str	r3, [r7, #0]
 80039a8:	4613      	mov	r3, r2
 80039aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b20      	cmp	r3, #32
 80039ba:	d175      	bne.n	8003aa8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d002      	beq.n	80039c8 <HAL_UART_Transmit+0x2c>
 80039c2:	88fb      	ldrh	r3, [r7, #6]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e06e      	b.n	8003aaa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2221      	movs	r2, #33	@ 0x21
 80039d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039da:	f7fd fb03 	bl	8000fe4 <HAL_GetTick>
 80039de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	88fa      	ldrh	r2, [r7, #6]
 80039e4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	88fa      	ldrh	r2, [r7, #6]
 80039ea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039f4:	d108      	bne.n	8003a08 <HAL_UART_Transmit+0x6c>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d104      	bne.n	8003a08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	61bb      	str	r3, [r7, #24]
 8003a06:	e003      	b.n	8003a10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a10:	e02e      	b.n	8003a70 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	2180      	movs	r1, #128	@ 0x80
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f000 f848 	bl	8003ab2 <UART_WaitOnFlagUntilTimeout>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e03a      	b.n	8003aaa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10b      	bne.n	8003a52 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	881b      	ldrh	r3, [r3, #0]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	3302      	adds	r3, #2
 8003a4e:	61bb      	str	r3, [r7, #24]
 8003a50:	e007      	b.n	8003a62 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	781a      	ldrb	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1cb      	bne.n	8003a12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	2200      	movs	r2, #0
 8003a82:	2140      	movs	r1, #64	@ 0x40
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 f814 	bl	8003ab2 <UART_WaitOnFlagUntilTimeout>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d005      	beq.n	8003a9c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e006      	b.n	8003aaa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	e000      	b.n	8003aaa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003aa8:	2302      	movs	r3, #2
  }
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3720      	adds	r7, #32
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b086      	sub	sp, #24
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	60f8      	str	r0, [r7, #12]
 8003aba:	60b9      	str	r1, [r7, #8]
 8003abc:	603b      	str	r3, [r7, #0]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ac2:	e03b      	b.n	8003b3c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ac4:	6a3b      	ldr	r3, [r7, #32]
 8003ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aca:	d037      	beq.n	8003b3c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003acc:	f7fd fa8a 	bl	8000fe4 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	6a3a      	ldr	r2, [r7, #32]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d302      	bcc.n	8003ae2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003adc:	6a3b      	ldr	r3, [r7, #32]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e03a      	b.n	8003b5c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d023      	beq.n	8003b3c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	2b80      	cmp	r3, #128	@ 0x80
 8003af8:	d020      	beq.n	8003b3c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2b40      	cmp	r3, #64	@ 0x40
 8003afe:	d01d      	beq.n	8003b3c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0308 	and.w	r3, r3, #8
 8003b0a:	2b08      	cmp	r3, #8
 8003b0c:	d116      	bne.n	8003b3c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b0e:	2300      	movs	r3, #0
 8003b10:	617b      	str	r3, [r7, #20]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	617b      	str	r3, [r7, #20]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 f81d 	bl	8003b64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2208      	movs	r2, #8
 8003b2e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e00f      	b.n	8003b5c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	4013      	ands	r3, r2
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	bf0c      	ite	eq
 8003b4c:	2301      	moveq	r3, #1
 8003b4e:	2300      	movne	r3, #0
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	461a      	mov	r2, r3
 8003b54:	79fb      	ldrb	r3, [r7, #7]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d0b4      	beq.n	8003ac4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3718      	adds	r7, #24
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b095      	sub	sp, #84	@ 0x54
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	330c      	adds	r3, #12
 8003b72:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b76:	e853 3f00 	ldrex	r3, [r3]
 8003b7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	330c      	adds	r3, #12
 8003b8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b8c:	643a      	str	r2, [r7, #64]	@ 0x40
 8003b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b94:	e841 2300 	strex	r3, r2, [r1]
 8003b98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1e5      	bne.n	8003b6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	3314      	adds	r3, #20
 8003ba6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba8:	6a3b      	ldr	r3, [r7, #32]
 8003baa:	e853 3f00 	ldrex	r3, [r3]
 8003bae:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	f023 0301 	bic.w	r3, r3, #1
 8003bb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	3314      	adds	r3, #20
 8003bbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bc8:	e841 2300 	strex	r3, r2, [r1]
 8003bcc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1e5      	bne.n	8003ba0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d119      	bne.n	8003c10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	330c      	adds	r3, #12
 8003be2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	e853 3f00 	ldrex	r3, [r3]
 8003bea:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	f023 0310 	bic.w	r3, r3, #16
 8003bf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	330c      	adds	r3, #12
 8003bfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bfc:	61ba      	str	r2, [r7, #24]
 8003bfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c00:	6979      	ldr	r1, [r7, #20]
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	e841 2300 	strex	r3, r2, [r1]
 8003c08:	613b      	str	r3, [r7, #16]
   return(result);
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1e5      	bne.n	8003bdc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2220      	movs	r2, #32
 8003c14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c1e:	bf00      	nop
 8003c20:	3754      	adds	r7, #84	@ 0x54
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bc80      	pop	{r7}
 8003c26:	4770      	bx	lr

08003c28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68da      	ldr	r2, [r3, #12]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689a      	ldr	r2, [r3, #8]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003c62:	f023 030c 	bic.w	r3, r3, #12
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6812      	ldr	r2, [r2, #0]
 8003c6a:	68b9      	ldr	r1, [r7, #8]
 8003c6c:	430b      	orrs	r3, r1
 8003c6e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	699a      	ldr	r2, [r3, #24]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a2c      	ldr	r2, [pc, #176]	@ (8003d3c <UART_SetConfig+0x114>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d103      	bne.n	8003c98 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c90:	f7fe fca2 	bl	80025d8 <HAL_RCC_GetPCLK2Freq>
 8003c94:	60f8      	str	r0, [r7, #12]
 8003c96:	e002      	b.n	8003c9e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c98:	f7fe fc8a 	bl	80025b0 <HAL_RCC_GetPCLK1Freq>
 8003c9c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4413      	add	r3, r2
 8003ca6:	009a      	lsls	r2, r3, #2
 8003ca8:	441a      	add	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb4:	4a22      	ldr	r2, [pc, #136]	@ (8003d40 <UART_SetConfig+0x118>)
 8003cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cba:	095b      	lsrs	r3, r3, #5
 8003cbc:	0119      	lsls	r1, r3, #4
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009a      	lsls	r2, r3, #2
 8003cc8:	441a      	add	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8003d40 <UART_SetConfig+0x118>)
 8003cd6:	fba3 0302 	umull	r0, r3, r3, r2
 8003cda:	095b      	lsrs	r3, r3, #5
 8003cdc:	2064      	movs	r0, #100	@ 0x64
 8003cde:	fb00 f303 	mul.w	r3, r0, r3
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	011b      	lsls	r3, r3, #4
 8003ce6:	3332      	adds	r3, #50	@ 0x32
 8003ce8:	4a15      	ldr	r2, [pc, #84]	@ (8003d40 <UART_SetConfig+0x118>)
 8003cea:	fba2 2303 	umull	r2, r3, r2, r3
 8003cee:	095b      	lsrs	r3, r3, #5
 8003cf0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cf4:	4419      	add	r1, r3
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	009a      	lsls	r2, r3, #2
 8003d00:	441a      	add	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8003d40 <UART_SetConfig+0x118>)
 8003d0e:	fba3 0302 	umull	r0, r3, r3, r2
 8003d12:	095b      	lsrs	r3, r3, #5
 8003d14:	2064      	movs	r0, #100	@ 0x64
 8003d16:	fb00 f303 	mul.w	r3, r0, r3
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	3332      	adds	r3, #50	@ 0x32
 8003d20:	4a07      	ldr	r2, [pc, #28]	@ (8003d40 <UART_SetConfig+0x118>)
 8003d22:	fba2 2303 	umull	r2, r3, r2, r3
 8003d26:	095b      	lsrs	r3, r3, #5
 8003d28:	f003 020f 	and.w	r2, r3, #15
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	440a      	add	r2, r1
 8003d32:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003d34:	bf00      	nop
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40013800 	.word	0x40013800
 8003d40:	51eb851f 	.word	0x51eb851f

08003d44 <siprintf>:
 8003d44:	b40e      	push	{r1, r2, r3}
 8003d46:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003d4a:	b500      	push	{lr}
 8003d4c:	b09c      	sub	sp, #112	@ 0x70
 8003d4e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003d50:	9002      	str	r0, [sp, #8]
 8003d52:	9006      	str	r0, [sp, #24]
 8003d54:	9107      	str	r1, [sp, #28]
 8003d56:	9104      	str	r1, [sp, #16]
 8003d58:	4808      	ldr	r0, [pc, #32]	@ (8003d7c <siprintf+0x38>)
 8003d5a:	4909      	ldr	r1, [pc, #36]	@ (8003d80 <siprintf+0x3c>)
 8003d5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d60:	9105      	str	r1, [sp, #20]
 8003d62:	6800      	ldr	r0, [r0, #0]
 8003d64:	a902      	add	r1, sp, #8
 8003d66:	9301      	str	r3, [sp, #4]
 8003d68:	f000 f992 	bl	8004090 <_svfiprintf_r>
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	9b02      	ldr	r3, [sp, #8]
 8003d70:	701a      	strb	r2, [r3, #0]
 8003d72:	b01c      	add	sp, #112	@ 0x70
 8003d74:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d78:	b003      	add	sp, #12
 8003d7a:	4770      	bx	lr
 8003d7c:	2000000c 	.word	0x2000000c
 8003d80:	ffff0208 	.word	0xffff0208

08003d84 <memset>:
 8003d84:	4603      	mov	r3, r0
 8003d86:	4402      	add	r2, r0
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d100      	bne.n	8003d8e <memset+0xa>
 8003d8c:	4770      	bx	lr
 8003d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d92:	e7f9      	b.n	8003d88 <memset+0x4>

08003d94 <__errno>:
 8003d94:	4b01      	ldr	r3, [pc, #4]	@ (8003d9c <__errno+0x8>)
 8003d96:	6818      	ldr	r0, [r3, #0]
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	2000000c 	.word	0x2000000c

08003da0 <__libc_init_array>:
 8003da0:	b570      	push	{r4, r5, r6, lr}
 8003da2:	2600      	movs	r6, #0
 8003da4:	4d0c      	ldr	r5, [pc, #48]	@ (8003dd8 <__libc_init_array+0x38>)
 8003da6:	4c0d      	ldr	r4, [pc, #52]	@ (8003ddc <__libc_init_array+0x3c>)
 8003da8:	1b64      	subs	r4, r4, r5
 8003daa:	10a4      	asrs	r4, r4, #2
 8003dac:	42a6      	cmp	r6, r4
 8003dae:	d109      	bne.n	8003dc4 <__libc_init_array+0x24>
 8003db0:	f000 fc78 	bl	80046a4 <_init>
 8003db4:	2600      	movs	r6, #0
 8003db6:	4d0a      	ldr	r5, [pc, #40]	@ (8003de0 <__libc_init_array+0x40>)
 8003db8:	4c0a      	ldr	r4, [pc, #40]	@ (8003de4 <__libc_init_array+0x44>)
 8003dba:	1b64      	subs	r4, r4, r5
 8003dbc:	10a4      	asrs	r4, r4, #2
 8003dbe:	42a6      	cmp	r6, r4
 8003dc0:	d105      	bne.n	8003dce <__libc_init_array+0x2e>
 8003dc2:	bd70      	pop	{r4, r5, r6, pc}
 8003dc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dc8:	4798      	blx	r3
 8003dca:	3601      	adds	r6, #1
 8003dcc:	e7ee      	b.n	8003dac <__libc_init_array+0xc>
 8003dce:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dd2:	4798      	blx	r3
 8003dd4:	3601      	adds	r6, #1
 8003dd6:	e7f2      	b.n	8003dbe <__libc_init_array+0x1e>
 8003dd8:	080047bc 	.word	0x080047bc
 8003ddc:	080047bc 	.word	0x080047bc
 8003de0:	080047bc 	.word	0x080047bc
 8003de4:	080047c0 	.word	0x080047c0

08003de8 <__retarget_lock_acquire_recursive>:
 8003de8:	4770      	bx	lr

08003dea <__retarget_lock_release_recursive>:
 8003dea:	4770      	bx	lr

08003dec <_free_r>:
 8003dec:	b538      	push	{r3, r4, r5, lr}
 8003dee:	4605      	mov	r5, r0
 8003df0:	2900      	cmp	r1, #0
 8003df2:	d040      	beq.n	8003e76 <_free_r+0x8a>
 8003df4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003df8:	1f0c      	subs	r4, r1, #4
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	bfb8      	it	lt
 8003dfe:	18e4      	addlt	r4, r4, r3
 8003e00:	f000 f8de 	bl	8003fc0 <__malloc_lock>
 8003e04:	4a1c      	ldr	r2, [pc, #112]	@ (8003e78 <_free_r+0x8c>)
 8003e06:	6813      	ldr	r3, [r2, #0]
 8003e08:	b933      	cbnz	r3, 8003e18 <_free_r+0x2c>
 8003e0a:	6063      	str	r3, [r4, #4]
 8003e0c:	6014      	str	r4, [r2, #0]
 8003e0e:	4628      	mov	r0, r5
 8003e10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e14:	f000 b8da 	b.w	8003fcc <__malloc_unlock>
 8003e18:	42a3      	cmp	r3, r4
 8003e1a:	d908      	bls.n	8003e2e <_free_r+0x42>
 8003e1c:	6820      	ldr	r0, [r4, #0]
 8003e1e:	1821      	adds	r1, r4, r0
 8003e20:	428b      	cmp	r3, r1
 8003e22:	bf01      	itttt	eq
 8003e24:	6819      	ldreq	r1, [r3, #0]
 8003e26:	685b      	ldreq	r3, [r3, #4]
 8003e28:	1809      	addeq	r1, r1, r0
 8003e2a:	6021      	streq	r1, [r4, #0]
 8003e2c:	e7ed      	b.n	8003e0a <_free_r+0x1e>
 8003e2e:	461a      	mov	r2, r3
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	b10b      	cbz	r3, 8003e38 <_free_r+0x4c>
 8003e34:	42a3      	cmp	r3, r4
 8003e36:	d9fa      	bls.n	8003e2e <_free_r+0x42>
 8003e38:	6811      	ldr	r1, [r2, #0]
 8003e3a:	1850      	adds	r0, r2, r1
 8003e3c:	42a0      	cmp	r0, r4
 8003e3e:	d10b      	bne.n	8003e58 <_free_r+0x6c>
 8003e40:	6820      	ldr	r0, [r4, #0]
 8003e42:	4401      	add	r1, r0
 8003e44:	1850      	adds	r0, r2, r1
 8003e46:	4283      	cmp	r3, r0
 8003e48:	6011      	str	r1, [r2, #0]
 8003e4a:	d1e0      	bne.n	8003e0e <_free_r+0x22>
 8003e4c:	6818      	ldr	r0, [r3, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	4408      	add	r0, r1
 8003e52:	6010      	str	r0, [r2, #0]
 8003e54:	6053      	str	r3, [r2, #4]
 8003e56:	e7da      	b.n	8003e0e <_free_r+0x22>
 8003e58:	d902      	bls.n	8003e60 <_free_r+0x74>
 8003e5a:	230c      	movs	r3, #12
 8003e5c:	602b      	str	r3, [r5, #0]
 8003e5e:	e7d6      	b.n	8003e0e <_free_r+0x22>
 8003e60:	6820      	ldr	r0, [r4, #0]
 8003e62:	1821      	adds	r1, r4, r0
 8003e64:	428b      	cmp	r3, r1
 8003e66:	bf01      	itttt	eq
 8003e68:	6819      	ldreq	r1, [r3, #0]
 8003e6a:	685b      	ldreq	r3, [r3, #4]
 8003e6c:	1809      	addeq	r1, r1, r0
 8003e6e:	6021      	streq	r1, [r4, #0]
 8003e70:	6063      	str	r3, [r4, #4]
 8003e72:	6054      	str	r4, [r2, #4]
 8003e74:	e7cb      	b.n	8003e0e <_free_r+0x22>
 8003e76:	bd38      	pop	{r3, r4, r5, pc}
 8003e78:	20000338 	.word	0x20000338

08003e7c <sbrk_aligned>:
 8003e7c:	b570      	push	{r4, r5, r6, lr}
 8003e7e:	4e0f      	ldr	r6, [pc, #60]	@ (8003ebc <sbrk_aligned+0x40>)
 8003e80:	460c      	mov	r4, r1
 8003e82:	6831      	ldr	r1, [r6, #0]
 8003e84:	4605      	mov	r5, r0
 8003e86:	b911      	cbnz	r1, 8003e8e <sbrk_aligned+0x12>
 8003e88:	f000 fbaa 	bl	80045e0 <_sbrk_r>
 8003e8c:	6030      	str	r0, [r6, #0]
 8003e8e:	4621      	mov	r1, r4
 8003e90:	4628      	mov	r0, r5
 8003e92:	f000 fba5 	bl	80045e0 <_sbrk_r>
 8003e96:	1c43      	adds	r3, r0, #1
 8003e98:	d103      	bne.n	8003ea2 <sbrk_aligned+0x26>
 8003e9a:	f04f 34ff 	mov.w	r4, #4294967295
 8003e9e:	4620      	mov	r0, r4
 8003ea0:	bd70      	pop	{r4, r5, r6, pc}
 8003ea2:	1cc4      	adds	r4, r0, #3
 8003ea4:	f024 0403 	bic.w	r4, r4, #3
 8003ea8:	42a0      	cmp	r0, r4
 8003eaa:	d0f8      	beq.n	8003e9e <sbrk_aligned+0x22>
 8003eac:	1a21      	subs	r1, r4, r0
 8003eae:	4628      	mov	r0, r5
 8003eb0:	f000 fb96 	bl	80045e0 <_sbrk_r>
 8003eb4:	3001      	adds	r0, #1
 8003eb6:	d1f2      	bne.n	8003e9e <sbrk_aligned+0x22>
 8003eb8:	e7ef      	b.n	8003e9a <sbrk_aligned+0x1e>
 8003eba:	bf00      	nop
 8003ebc:	20000334 	.word	0x20000334

08003ec0 <_malloc_r>:
 8003ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ec4:	1ccd      	adds	r5, r1, #3
 8003ec6:	f025 0503 	bic.w	r5, r5, #3
 8003eca:	3508      	adds	r5, #8
 8003ecc:	2d0c      	cmp	r5, #12
 8003ece:	bf38      	it	cc
 8003ed0:	250c      	movcc	r5, #12
 8003ed2:	2d00      	cmp	r5, #0
 8003ed4:	4606      	mov	r6, r0
 8003ed6:	db01      	blt.n	8003edc <_malloc_r+0x1c>
 8003ed8:	42a9      	cmp	r1, r5
 8003eda:	d904      	bls.n	8003ee6 <_malloc_r+0x26>
 8003edc:	230c      	movs	r3, #12
 8003ede:	6033      	str	r3, [r6, #0]
 8003ee0:	2000      	movs	r0, #0
 8003ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ee6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003fbc <_malloc_r+0xfc>
 8003eea:	f000 f869 	bl	8003fc0 <__malloc_lock>
 8003eee:	f8d8 3000 	ldr.w	r3, [r8]
 8003ef2:	461c      	mov	r4, r3
 8003ef4:	bb44      	cbnz	r4, 8003f48 <_malloc_r+0x88>
 8003ef6:	4629      	mov	r1, r5
 8003ef8:	4630      	mov	r0, r6
 8003efa:	f7ff ffbf 	bl	8003e7c <sbrk_aligned>
 8003efe:	1c43      	adds	r3, r0, #1
 8003f00:	4604      	mov	r4, r0
 8003f02:	d158      	bne.n	8003fb6 <_malloc_r+0xf6>
 8003f04:	f8d8 4000 	ldr.w	r4, [r8]
 8003f08:	4627      	mov	r7, r4
 8003f0a:	2f00      	cmp	r7, #0
 8003f0c:	d143      	bne.n	8003f96 <_malloc_r+0xd6>
 8003f0e:	2c00      	cmp	r4, #0
 8003f10:	d04b      	beq.n	8003faa <_malloc_r+0xea>
 8003f12:	6823      	ldr	r3, [r4, #0]
 8003f14:	4639      	mov	r1, r7
 8003f16:	4630      	mov	r0, r6
 8003f18:	eb04 0903 	add.w	r9, r4, r3
 8003f1c:	f000 fb60 	bl	80045e0 <_sbrk_r>
 8003f20:	4581      	cmp	r9, r0
 8003f22:	d142      	bne.n	8003faa <_malloc_r+0xea>
 8003f24:	6821      	ldr	r1, [r4, #0]
 8003f26:	4630      	mov	r0, r6
 8003f28:	1a6d      	subs	r5, r5, r1
 8003f2a:	4629      	mov	r1, r5
 8003f2c:	f7ff ffa6 	bl	8003e7c <sbrk_aligned>
 8003f30:	3001      	adds	r0, #1
 8003f32:	d03a      	beq.n	8003faa <_malloc_r+0xea>
 8003f34:	6823      	ldr	r3, [r4, #0]
 8003f36:	442b      	add	r3, r5
 8003f38:	6023      	str	r3, [r4, #0]
 8003f3a:	f8d8 3000 	ldr.w	r3, [r8]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	bb62      	cbnz	r2, 8003f9c <_malloc_r+0xdc>
 8003f42:	f8c8 7000 	str.w	r7, [r8]
 8003f46:	e00f      	b.n	8003f68 <_malloc_r+0xa8>
 8003f48:	6822      	ldr	r2, [r4, #0]
 8003f4a:	1b52      	subs	r2, r2, r5
 8003f4c:	d420      	bmi.n	8003f90 <_malloc_r+0xd0>
 8003f4e:	2a0b      	cmp	r2, #11
 8003f50:	d917      	bls.n	8003f82 <_malloc_r+0xc2>
 8003f52:	1961      	adds	r1, r4, r5
 8003f54:	42a3      	cmp	r3, r4
 8003f56:	6025      	str	r5, [r4, #0]
 8003f58:	bf18      	it	ne
 8003f5a:	6059      	strne	r1, [r3, #4]
 8003f5c:	6863      	ldr	r3, [r4, #4]
 8003f5e:	bf08      	it	eq
 8003f60:	f8c8 1000 	streq.w	r1, [r8]
 8003f64:	5162      	str	r2, [r4, r5]
 8003f66:	604b      	str	r3, [r1, #4]
 8003f68:	4630      	mov	r0, r6
 8003f6a:	f000 f82f 	bl	8003fcc <__malloc_unlock>
 8003f6e:	f104 000b 	add.w	r0, r4, #11
 8003f72:	1d23      	adds	r3, r4, #4
 8003f74:	f020 0007 	bic.w	r0, r0, #7
 8003f78:	1ac2      	subs	r2, r0, r3
 8003f7a:	bf1c      	itt	ne
 8003f7c:	1a1b      	subne	r3, r3, r0
 8003f7e:	50a3      	strne	r3, [r4, r2]
 8003f80:	e7af      	b.n	8003ee2 <_malloc_r+0x22>
 8003f82:	6862      	ldr	r2, [r4, #4]
 8003f84:	42a3      	cmp	r3, r4
 8003f86:	bf0c      	ite	eq
 8003f88:	f8c8 2000 	streq.w	r2, [r8]
 8003f8c:	605a      	strne	r2, [r3, #4]
 8003f8e:	e7eb      	b.n	8003f68 <_malloc_r+0xa8>
 8003f90:	4623      	mov	r3, r4
 8003f92:	6864      	ldr	r4, [r4, #4]
 8003f94:	e7ae      	b.n	8003ef4 <_malloc_r+0x34>
 8003f96:	463c      	mov	r4, r7
 8003f98:	687f      	ldr	r7, [r7, #4]
 8003f9a:	e7b6      	b.n	8003f0a <_malloc_r+0x4a>
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	42a3      	cmp	r3, r4
 8003fa2:	d1fb      	bne.n	8003f9c <_malloc_r+0xdc>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	6053      	str	r3, [r2, #4]
 8003fa8:	e7de      	b.n	8003f68 <_malloc_r+0xa8>
 8003faa:	230c      	movs	r3, #12
 8003fac:	4630      	mov	r0, r6
 8003fae:	6033      	str	r3, [r6, #0]
 8003fb0:	f000 f80c 	bl	8003fcc <__malloc_unlock>
 8003fb4:	e794      	b.n	8003ee0 <_malloc_r+0x20>
 8003fb6:	6005      	str	r5, [r0, #0]
 8003fb8:	e7d6      	b.n	8003f68 <_malloc_r+0xa8>
 8003fba:	bf00      	nop
 8003fbc:	20000338 	.word	0x20000338

08003fc0 <__malloc_lock>:
 8003fc0:	4801      	ldr	r0, [pc, #4]	@ (8003fc8 <__malloc_lock+0x8>)
 8003fc2:	f7ff bf11 	b.w	8003de8 <__retarget_lock_acquire_recursive>
 8003fc6:	bf00      	nop
 8003fc8:	20000330 	.word	0x20000330

08003fcc <__malloc_unlock>:
 8003fcc:	4801      	ldr	r0, [pc, #4]	@ (8003fd4 <__malloc_unlock+0x8>)
 8003fce:	f7ff bf0c 	b.w	8003dea <__retarget_lock_release_recursive>
 8003fd2:	bf00      	nop
 8003fd4:	20000330 	.word	0x20000330

08003fd8 <__ssputs_r>:
 8003fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fdc:	461f      	mov	r7, r3
 8003fde:	688e      	ldr	r6, [r1, #8]
 8003fe0:	4682      	mov	sl, r0
 8003fe2:	42be      	cmp	r6, r7
 8003fe4:	460c      	mov	r4, r1
 8003fe6:	4690      	mov	r8, r2
 8003fe8:	680b      	ldr	r3, [r1, #0]
 8003fea:	d82d      	bhi.n	8004048 <__ssputs_r+0x70>
 8003fec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003ff0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003ff4:	d026      	beq.n	8004044 <__ssputs_r+0x6c>
 8003ff6:	6965      	ldr	r5, [r4, #20]
 8003ff8:	6909      	ldr	r1, [r1, #16]
 8003ffa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ffe:	eba3 0901 	sub.w	r9, r3, r1
 8004002:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004006:	1c7b      	adds	r3, r7, #1
 8004008:	444b      	add	r3, r9
 800400a:	106d      	asrs	r5, r5, #1
 800400c:	429d      	cmp	r5, r3
 800400e:	bf38      	it	cc
 8004010:	461d      	movcc	r5, r3
 8004012:	0553      	lsls	r3, r2, #21
 8004014:	d527      	bpl.n	8004066 <__ssputs_r+0x8e>
 8004016:	4629      	mov	r1, r5
 8004018:	f7ff ff52 	bl	8003ec0 <_malloc_r>
 800401c:	4606      	mov	r6, r0
 800401e:	b360      	cbz	r0, 800407a <__ssputs_r+0xa2>
 8004020:	464a      	mov	r2, r9
 8004022:	6921      	ldr	r1, [r4, #16]
 8004024:	f000 fafa 	bl	800461c <memcpy>
 8004028:	89a3      	ldrh	r3, [r4, #12]
 800402a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800402e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004032:	81a3      	strh	r3, [r4, #12]
 8004034:	6126      	str	r6, [r4, #16]
 8004036:	444e      	add	r6, r9
 8004038:	6026      	str	r6, [r4, #0]
 800403a:	463e      	mov	r6, r7
 800403c:	6165      	str	r5, [r4, #20]
 800403e:	eba5 0509 	sub.w	r5, r5, r9
 8004042:	60a5      	str	r5, [r4, #8]
 8004044:	42be      	cmp	r6, r7
 8004046:	d900      	bls.n	800404a <__ssputs_r+0x72>
 8004048:	463e      	mov	r6, r7
 800404a:	4632      	mov	r2, r6
 800404c:	4641      	mov	r1, r8
 800404e:	6820      	ldr	r0, [r4, #0]
 8004050:	f000 faac 	bl	80045ac <memmove>
 8004054:	2000      	movs	r0, #0
 8004056:	68a3      	ldr	r3, [r4, #8]
 8004058:	1b9b      	subs	r3, r3, r6
 800405a:	60a3      	str	r3, [r4, #8]
 800405c:	6823      	ldr	r3, [r4, #0]
 800405e:	4433      	add	r3, r6
 8004060:	6023      	str	r3, [r4, #0]
 8004062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004066:	462a      	mov	r2, r5
 8004068:	f000 fae6 	bl	8004638 <_realloc_r>
 800406c:	4606      	mov	r6, r0
 800406e:	2800      	cmp	r0, #0
 8004070:	d1e0      	bne.n	8004034 <__ssputs_r+0x5c>
 8004072:	4650      	mov	r0, sl
 8004074:	6921      	ldr	r1, [r4, #16]
 8004076:	f7ff feb9 	bl	8003dec <_free_r>
 800407a:	230c      	movs	r3, #12
 800407c:	f8ca 3000 	str.w	r3, [sl]
 8004080:	89a3      	ldrh	r3, [r4, #12]
 8004082:	f04f 30ff 	mov.w	r0, #4294967295
 8004086:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800408a:	81a3      	strh	r3, [r4, #12]
 800408c:	e7e9      	b.n	8004062 <__ssputs_r+0x8a>
	...

08004090 <_svfiprintf_r>:
 8004090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004094:	4698      	mov	r8, r3
 8004096:	898b      	ldrh	r3, [r1, #12]
 8004098:	4607      	mov	r7, r0
 800409a:	061b      	lsls	r3, r3, #24
 800409c:	460d      	mov	r5, r1
 800409e:	4614      	mov	r4, r2
 80040a0:	b09d      	sub	sp, #116	@ 0x74
 80040a2:	d510      	bpl.n	80040c6 <_svfiprintf_r+0x36>
 80040a4:	690b      	ldr	r3, [r1, #16]
 80040a6:	b973      	cbnz	r3, 80040c6 <_svfiprintf_r+0x36>
 80040a8:	2140      	movs	r1, #64	@ 0x40
 80040aa:	f7ff ff09 	bl	8003ec0 <_malloc_r>
 80040ae:	6028      	str	r0, [r5, #0]
 80040b0:	6128      	str	r0, [r5, #16]
 80040b2:	b930      	cbnz	r0, 80040c2 <_svfiprintf_r+0x32>
 80040b4:	230c      	movs	r3, #12
 80040b6:	603b      	str	r3, [r7, #0]
 80040b8:	f04f 30ff 	mov.w	r0, #4294967295
 80040bc:	b01d      	add	sp, #116	@ 0x74
 80040be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040c2:	2340      	movs	r3, #64	@ 0x40
 80040c4:	616b      	str	r3, [r5, #20]
 80040c6:	2300      	movs	r3, #0
 80040c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80040ca:	2320      	movs	r3, #32
 80040cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80040d0:	2330      	movs	r3, #48	@ 0x30
 80040d2:	f04f 0901 	mov.w	r9, #1
 80040d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80040da:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004274 <_svfiprintf_r+0x1e4>
 80040de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80040e2:	4623      	mov	r3, r4
 80040e4:	469a      	mov	sl, r3
 80040e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040ea:	b10a      	cbz	r2, 80040f0 <_svfiprintf_r+0x60>
 80040ec:	2a25      	cmp	r2, #37	@ 0x25
 80040ee:	d1f9      	bne.n	80040e4 <_svfiprintf_r+0x54>
 80040f0:	ebba 0b04 	subs.w	fp, sl, r4
 80040f4:	d00b      	beq.n	800410e <_svfiprintf_r+0x7e>
 80040f6:	465b      	mov	r3, fp
 80040f8:	4622      	mov	r2, r4
 80040fa:	4629      	mov	r1, r5
 80040fc:	4638      	mov	r0, r7
 80040fe:	f7ff ff6b 	bl	8003fd8 <__ssputs_r>
 8004102:	3001      	adds	r0, #1
 8004104:	f000 80a7 	beq.w	8004256 <_svfiprintf_r+0x1c6>
 8004108:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800410a:	445a      	add	r2, fp
 800410c:	9209      	str	r2, [sp, #36]	@ 0x24
 800410e:	f89a 3000 	ldrb.w	r3, [sl]
 8004112:	2b00      	cmp	r3, #0
 8004114:	f000 809f 	beq.w	8004256 <_svfiprintf_r+0x1c6>
 8004118:	2300      	movs	r3, #0
 800411a:	f04f 32ff 	mov.w	r2, #4294967295
 800411e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004122:	f10a 0a01 	add.w	sl, sl, #1
 8004126:	9304      	str	r3, [sp, #16]
 8004128:	9307      	str	r3, [sp, #28]
 800412a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800412e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004130:	4654      	mov	r4, sl
 8004132:	2205      	movs	r2, #5
 8004134:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004138:	484e      	ldr	r0, [pc, #312]	@ (8004274 <_svfiprintf_r+0x1e4>)
 800413a:	f000 fa61 	bl	8004600 <memchr>
 800413e:	9a04      	ldr	r2, [sp, #16]
 8004140:	b9d8      	cbnz	r0, 800417a <_svfiprintf_r+0xea>
 8004142:	06d0      	lsls	r0, r2, #27
 8004144:	bf44      	itt	mi
 8004146:	2320      	movmi	r3, #32
 8004148:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800414c:	0711      	lsls	r1, r2, #28
 800414e:	bf44      	itt	mi
 8004150:	232b      	movmi	r3, #43	@ 0x2b
 8004152:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004156:	f89a 3000 	ldrb.w	r3, [sl]
 800415a:	2b2a      	cmp	r3, #42	@ 0x2a
 800415c:	d015      	beq.n	800418a <_svfiprintf_r+0xfa>
 800415e:	4654      	mov	r4, sl
 8004160:	2000      	movs	r0, #0
 8004162:	f04f 0c0a 	mov.w	ip, #10
 8004166:	9a07      	ldr	r2, [sp, #28]
 8004168:	4621      	mov	r1, r4
 800416a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800416e:	3b30      	subs	r3, #48	@ 0x30
 8004170:	2b09      	cmp	r3, #9
 8004172:	d94b      	bls.n	800420c <_svfiprintf_r+0x17c>
 8004174:	b1b0      	cbz	r0, 80041a4 <_svfiprintf_r+0x114>
 8004176:	9207      	str	r2, [sp, #28]
 8004178:	e014      	b.n	80041a4 <_svfiprintf_r+0x114>
 800417a:	eba0 0308 	sub.w	r3, r0, r8
 800417e:	fa09 f303 	lsl.w	r3, r9, r3
 8004182:	4313      	orrs	r3, r2
 8004184:	46a2      	mov	sl, r4
 8004186:	9304      	str	r3, [sp, #16]
 8004188:	e7d2      	b.n	8004130 <_svfiprintf_r+0xa0>
 800418a:	9b03      	ldr	r3, [sp, #12]
 800418c:	1d19      	adds	r1, r3, #4
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	9103      	str	r1, [sp, #12]
 8004192:	2b00      	cmp	r3, #0
 8004194:	bfbb      	ittet	lt
 8004196:	425b      	neglt	r3, r3
 8004198:	f042 0202 	orrlt.w	r2, r2, #2
 800419c:	9307      	strge	r3, [sp, #28]
 800419e:	9307      	strlt	r3, [sp, #28]
 80041a0:	bfb8      	it	lt
 80041a2:	9204      	strlt	r2, [sp, #16]
 80041a4:	7823      	ldrb	r3, [r4, #0]
 80041a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80041a8:	d10a      	bne.n	80041c0 <_svfiprintf_r+0x130>
 80041aa:	7863      	ldrb	r3, [r4, #1]
 80041ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80041ae:	d132      	bne.n	8004216 <_svfiprintf_r+0x186>
 80041b0:	9b03      	ldr	r3, [sp, #12]
 80041b2:	3402      	adds	r4, #2
 80041b4:	1d1a      	adds	r2, r3, #4
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	9203      	str	r2, [sp, #12]
 80041ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80041be:	9305      	str	r3, [sp, #20]
 80041c0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004278 <_svfiprintf_r+0x1e8>
 80041c4:	2203      	movs	r2, #3
 80041c6:	4650      	mov	r0, sl
 80041c8:	7821      	ldrb	r1, [r4, #0]
 80041ca:	f000 fa19 	bl	8004600 <memchr>
 80041ce:	b138      	cbz	r0, 80041e0 <_svfiprintf_r+0x150>
 80041d0:	2240      	movs	r2, #64	@ 0x40
 80041d2:	9b04      	ldr	r3, [sp, #16]
 80041d4:	eba0 000a 	sub.w	r0, r0, sl
 80041d8:	4082      	lsls	r2, r0
 80041da:	4313      	orrs	r3, r2
 80041dc:	3401      	adds	r4, #1
 80041de:	9304      	str	r3, [sp, #16]
 80041e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041e4:	2206      	movs	r2, #6
 80041e6:	4825      	ldr	r0, [pc, #148]	@ (800427c <_svfiprintf_r+0x1ec>)
 80041e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80041ec:	f000 fa08 	bl	8004600 <memchr>
 80041f0:	2800      	cmp	r0, #0
 80041f2:	d036      	beq.n	8004262 <_svfiprintf_r+0x1d2>
 80041f4:	4b22      	ldr	r3, [pc, #136]	@ (8004280 <_svfiprintf_r+0x1f0>)
 80041f6:	bb1b      	cbnz	r3, 8004240 <_svfiprintf_r+0x1b0>
 80041f8:	9b03      	ldr	r3, [sp, #12]
 80041fa:	3307      	adds	r3, #7
 80041fc:	f023 0307 	bic.w	r3, r3, #7
 8004200:	3308      	adds	r3, #8
 8004202:	9303      	str	r3, [sp, #12]
 8004204:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004206:	4433      	add	r3, r6
 8004208:	9309      	str	r3, [sp, #36]	@ 0x24
 800420a:	e76a      	b.n	80040e2 <_svfiprintf_r+0x52>
 800420c:	460c      	mov	r4, r1
 800420e:	2001      	movs	r0, #1
 8004210:	fb0c 3202 	mla	r2, ip, r2, r3
 8004214:	e7a8      	b.n	8004168 <_svfiprintf_r+0xd8>
 8004216:	2300      	movs	r3, #0
 8004218:	f04f 0c0a 	mov.w	ip, #10
 800421c:	4619      	mov	r1, r3
 800421e:	3401      	adds	r4, #1
 8004220:	9305      	str	r3, [sp, #20]
 8004222:	4620      	mov	r0, r4
 8004224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004228:	3a30      	subs	r2, #48	@ 0x30
 800422a:	2a09      	cmp	r2, #9
 800422c:	d903      	bls.n	8004236 <_svfiprintf_r+0x1a6>
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0c6      	beq.n	80041c0 <_svfiprintf_r+0x130>
 8004232:	9105      	str	r1, [sp, #20]
 8004234:	e7c4      	b.n	80041c0 <_svfiprintf_r+0x130>
 8004236:	4604      	mov	r4, r0
 8004238:	2301      	movs	r3, #1
 800423a:	fb0c 2101 	mla	r1, ip, r1, r2
 800423e:	e7f0      	b.n	8004222 <_svfiprintf_r+0x192>
 8004240:	ab03      	add	r3, sp, #12
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	462a      	mov	r2, r5
 8004246:	4638      	mov	r0, r7
 8004248:	4b0e      	ldr	r3, [pc, #56]	@ (8004284 <_svfiprintf_r+0x1f4>)
 800424a:	a904      	add	r1, sp, #16
 800424c:	f3af 8000 	nop.w
 8004250:	1c42      	adds	r2, r0, #1
 8004252:	4606      	mov	r6, r0
 8004254:	d1d6      	bne.n	8004204 <_svfiprintf_r+0x174>
 8004256:	89ab      	ldrh	r3, [r5, #12]
 8004258:	065b      	lsls	r3, r3, #25
 800425a:	f53f af2d 	bmi.w	80040b8 <_svfiprintf_r+0x28>
 800425e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004260:	e72c      	b.n	80040bc <_svfiprintf_r+0x2c>
 8004262:	ab03      	add	r3, sp, #12
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	462a      	mov	r2, r5
 8004268:	4638      	mov	r0, r7
 800426a:	4b06      	ldr	r3, [pc, #24]	@ (8004284 <_svfiprintf_r+0x1f4>)
 800426c:	a904      	add	r1, sp, #16
 800426e:	f000 f87d 	bl	800436c <_printf_i>
 8004272:	e7ed      	b.n	8004250 <_svfiprintf_r+0x1c0>
 8004274:	0800477e 	.word	0x0800477e
 8004278:	08004784 	.word	0x08004784
 800427c:	08004788 	.word	0x08004788
 8004280:	00000000 	.word	0x00000000
 8004284:	08003fd9 	.word	0x08003fd9

08004288 <_printf_common>:
 8004288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800428c:	4616      	mov	r6, r2
 800428e:	4698      	mov	r8, r3
 8004290:	688a      	ldr	r2, [r1, #8]
 8004292:	690b      	ldr	r3, [r1, #16]
 8004294:	4607      	mov	r7, r0
 8004296:	4293      	cmp	r3, r2
 8004298:	bfb8      	it	lt
 800429a:	4613      	movlt	r3, r2
 800429c:	6033      	str	r3, [r6, #0]
 800429e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80042a2:	460c      	mov	r4, r1
 80042a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80042a8:	b10a      	cbz	r2, 80042ae <_printf_common+0x26>
 80042aa:	3301      	adds	r3, #1
 80042ac:	6033      	str	r3, [r6, #0]
 80042ae:	6823      	ldr	r3, [r4, #0]
 80042b0:	0699      	lsls	r1, r3, #26
 80042b2:	bf42      	ittt	mi
 80042b4:	6833      	ldrmi	r3, [r6, #0]
 80042b6:	3302      	addmi	r3, #2
 80042b8:	6033      	strmi	r3, [r6, #0]
 80042ba:	6825      	ldr	r5, [r4, #0]
 80042bc:	f015 0506 	ands.w	r5, r5, #6
 80042c0:	d106      	bne.n	80042d0 <_printf_common+0x48>
 80042c2:	f104 0a19 	add.w	sl, r4, #25
 80042c6:	68e3      	ldr	r3, [r4, #12]
 80042c8:	6832      	ldr	r2, [r6, #0]
 80042ca:	1a9b      	subs	r3, r3, r2
 80042cc:	42ab      	cmp	r3, r5
 80042ce:	dc2b      	bgt.n	8004328 <_printf_common+0xa0>
 80042d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80042d4:	6822      	ldr	r2, [r4, #0]
 80042d6:	3b00      	subs	r3, #0
 80042d8:	bf18      	it	ne
 80042da:	2301      	movne	r3, #1
 80042dc:	0692      	lsls	r2, r2, #26
 80042de:	d430      	bmi.n	8004342 <_printf_common+0xba>
 80042e0:	4641      	mov	r1, r8
 80042e2:	4638      	mov	r0, r7
 80042e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80042e8:	47c8      	blx	r9
 80042ea:	3001      	adds	r0, #1
 80042ec:	d023      	beq.n	8004336 <_printf_common+0xae>
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	6922      	ldr	r2, [r4, #16]
 80042f2:	f003 0306 	and.w	r3, r3, #6
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	bf14      	ite	ne
 80042fa:	2500      	movne	r5, #0
 80042fc:	6833      	ldreq	r3, [r6, #0]
 80042fe:	f04f 0600 	mov.w	r6, #0
 8004302:	bf08      	it	eq
 8004304:	68e5      	ldreq	r5, [r4, #12]
 8004306:	f104 041a 	add.w	r4, r4, #26
 800430a:	bf08      	it	eq
 800430c:	1aed      	subeq	r5, r5, r3
 800430e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004312:	bf08      	it	eq
 8004314:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004318:	4293      	cmp	r3, r2
 800431a:	bfc4      	itt	gt
 800431c:	1a9b      	subgt	r3, r3, r2
 800431e:	18ed      	addgt	r5, r5, r3
 8004320:	42b5      	cmp	r5, r6
 8004322:	d11a      	bne.n	800435a <_printf_common+0xd2>
 8004324:	2000      	movs	r0, #0
 8004326:	e008      	b.n	800433a <_printf_common+0xb2>
 8004328:	2301      	movs	r3, #1
 800432a:	4652      	mov	r2, sl
 800432c:	4641      	mov	r1, r8
 800432e:	4638      	mov	r0, r7
 8004330:	47c8      	blx	r9
 8004332:	3001      	adds	r0, #1
 8004334:	d103      	bne.n	800433e <_printf_common+0xb6>
 8004336:	f04f 30ff 	mov.w	r0, #4294967295
 800433a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800433e:	3501      	adds	r5, #1
 8004340:	e7c1      	b.n	80042c6 <_printf_common+0x3e>
 8004342:	2030      	movs	r0, #48	@ 0x30
 8004344:	18e1      	adds	r1, r4, r3
 8004346:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800434a:	1c5a      	adds	r2, r3, #1
 800434c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004350:	4422      	add	r2, r4
 8004352:	3302      	adds	r3, #2
 8004354:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004358:	e7c2      	b.n	80042e0 <_printf_common+0x58>
 800435a:	2301      	movs	r3, #1
 800435c:	4622      	mov	r2, r4
 800435e:	4641      	mov	r1, r8
 8004360:	4638      	mov	r0, r7
 8004362:	47c8      	blx	r9
 8004364:	3001      	adds	r0, #1
 8004366:	d0e6      	beq.n	8004336 <_printf_common+0xae>
 8004368:	3601      	adds	r6, #1
 800436a:	e7d9      	b.n	8004320 <_printf_common+0x98>

0800436c <_printf_i>:
 800436c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004370:	7e0f      	ldrb	r7, [r1, #24]
 8004372:	4691      	mov	r9, r2
 8004374:	2f78      	cmp	r7, #120	@ 0x78
 8004376:	4680      	mov	r8, r0
 8004378:	460c      	mov	r4, r1
 800437a:	469a      	mov	sl, r3
 800437c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800437e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004382:	d807      	bhi.n	8004394 <_printf_i+0x28>
 8004384:	2f62      	cmp	r7, #98	@ 0x62
 8004386:	d80a      	bhi.n	800439e <_printf_i+0x32>
 8004388:	2f00      	cmp	r7, #0
 800438a:	f000 80d3 	beq.w	8004534 <_printf_i+0x1c8>
 800438e:	2f58      	cmp	r7, #88	@ 0x58
 8004390:	f000 80ba 	beq.w	8004508 <_printf_i+0x19c>
 8004394:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004398:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800439c:	e03a      	b.n	8004414 <_printf_i+0xa8>
 800439e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80043a2:	2b15      	cmp	r3, #21
 80043a4:	d8f6      	bhi.n	8004394 <_printf_i+0x28>
 80043a6:	a101      	add	r1, pc, #4	@ (adr r1, 80043ac <_printf_i+0x40>)
 80043a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043ac:	08004405 	.word	0x08004405
 80043b0:	08004419 	.word	0x08004419
 80043b4:	08004395 	.word	0x08004395
 80043b8:	08004395 	.word	0x08004395
 80043bc:	08004395 	.word	0x08004395
 80043c0:	08004395 	.word	0x08004395
 80043c4:	08004419 	.word	0x08004419
 80043c8:	08004395 	.word	0x08004395
 80043cc:	08004395 	.word	0x08004395
 80043d0:	08004395 	.word	0x08004395
 80043d4:	08004395 	.word	0x08004395
 80043d8:	0800451b 	.word	0x0800451b
 80043dc:	08004443 	.word	0x08004443
 80043e0:	080044d5 	.word	0x080044d5
 80043e4:	08004395 	.word	0x08004395
 80043e8:	08004395 	.word	0x08004395
 80043ec:	0800453d 	.word	0x0800453d
 80043f0:	08004395 	.word	0x08004395
 80043f4:	08004443 	.word	0x08004443
 80043f8:	08004395 	.word	0x08004395
 80043fc:	08004395 	.word	0x08004395
 8004400:	080044dd 	.word	0x080044dd
 8004404:	6833      	ldr	r3, [r6, #0]
 8004406:	1d1a      	adds	r2, r3, #4
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6032      	str	r2, [r6, #0]
 800440c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004410:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004414:	2301      	movs	r3, #1
 8004416:	e09e      	b.n	8004556 <_printf_i+0x1ea>
 8004418:	6833      	ldr	r3, [r6, #0]
 800441a:	6820      	ldr	r0, [r4, #0]
 800441c:	1d19      	adds	r1, r3, #4
 800441e:	6031      	str	r1, [r6, #0]
 8004420:	0606      	lsls	r6, r0, #24
 8004422:	d501      	bpl.n	8004428 <_printf_i+0xbc>
 8004424:	681d      	ldr	r5, [r3, #0]
 8004426:	e003      	b.n	8004430 <_printf_i+0xc4>
 8004428:	0645      	lsls	r5, r0, #25
 800442a:	d5fb      	bpl.n	8004424 <_printf_i+0xb8>
 800442c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004430:	2d00      	cmp	r5, #0
 8004432:	da03      	bge.n	800443c <_printf_i+0xd0>
 8004434:	232d      	movs	r3, #45	@ 0x2d
 8004436:	426d      	negs	r5, r5
 8004438:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800443c:	230a      	movs	r3, #10
 800443e:	4859      	ldr	r0, [pc, #356]	@ (80045a4 <_printf_i+0x238>)
 8004440:	e011      	b.n	8004466 <_printf_i+0xfa>
 8004442:	6821      	ldr	r1, [r4, #0]
 8004444:	6833      	ldr	r3, [r6, #0]
 8004446:	0608      	lsls	r0, r1, #24
 8004448:	f853 5b04 	ldr.w	r5, [r3], #4
 800444c:	d402      	bmi.n	8004454 <_printf_i+0xe8>
 800444e:	0649      	lsls	r1, r1, #25
 8004450:	bf48      	it	mi
 8004452:	b2ad      	uxthmi	r5, r5
 8004454:	2f6f      	cmp	r7, #111	@ 0x6f
 8004456:	6033      	str	r3, [r6, #0]
 8004458:	bf14      	ite	ne
 800445a:	230a      	movne	r3, #10
 800445c:	2308      	moveq	r3, #8
 800445e:	4851      	ldr	r0, [pc, #324]	@ (80045a4 <_printf_i+0x238>)
 8004460:	2100      	movs	r1, #0
 8004462:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004466:	6866      	ldr	r6, [r4, #4]
 8004468:	2e00      	cmp	r6, #0
 800446a:	bfa8      	it	ge
 800446c:	6821      	ldrge	r1, [r4, #0]
 800446e:	60a6      	str	r6, [r4, #8]
 8004470:	bfa4      	itt	ge
 8004472:	f021 0104 	bicge.w	r1, r1, #4
 8004476:	6021      	strge	r1, [r4, #0]
 8004478:	b90d      	cbnz	r5, 800447e <_printf_i+0x112>
 800447a:	2e00      	cmp	r6, #0
 800447c:	d04b      	beq.n	8004516 <_printf_i+0x1aa>
 800447e:	4616      	mov	r6, r2
 8004480:	fbb5 f1f3 	udiv	r1, r5, r3
 8004484:	fb03 5711 	mls	r7, r3, r1, r5
 8004488:	5dc7      	ldrb	r7, [r0, r7]
 800448a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800448e:	462f      	mov	r7, r5
 8004490:	42bb      	cmp	r3, r7
 8004492:	460d      	mov	r5, r1
 8004494:	d9f4      	bls.n	8004480 <_printf_i+0x114>
 8004496:	2b08      	cmp	r3, #8
 8004498:	d10b      	bne.n	80044b2 <_printf_i+0x146>
 800449a:	6823      	ldr	r3, [r4, #0]
 800449c:	07df      	lsls	r7, r3, #31
 800449e:	d508      	bpl.n	80044b2 <_printf_i+0x146>
 80044a0:	6923      	ldr	r3, [r4, #16]
 80044a2:	6861      	ldr	r1, [r4, #4]
 80044a4:	4299      	cmp	r1, r3
 80044a6:	bfde      	ittt	le
 80044a8:	2330      	movle	r3, #48	@ 0x30
 80044aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80044ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80044b2:	1b92      	subs	r2, r2, r6
 80044b4:	6122      	str	r2, [r4, #16]
 80044b6:	464b      	mov	r3, r9
 80044b8:	4621      	mov	r1, r4
 80044ba:	4640      	mov	r0, r8
 80044bc:	f8cd a000 	str.w	sl, [sp]
 80044c0:	aa03      	add	r2, sp, #12
 80044c2:	f7ff fee1 	bl	8004288 <_printf_common>
 80044c6:	3001      	adds	r0, #1
 80044c8:	d14a      	bne.n	8004560 <_printf_i+0x1f4>
 80044ca:	f04f 30ff 	mov.w	r0, #4294967295
 80044ce:	b004      	add	sp, #16
 80044d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044d4:	6823      	ldr	r3, [r4, #0]
 80044d6:	f043 0320 	orr.w	r3, r3, #32
 80044da:	6023      	str	r3, [r4, #0]
 80044dc:	2778      	movs	r7, #120	@ 0x78
 80044de:	4832      	ldr	r0, [pc, #200]	@ (80045a8 <_printf_i+0x23c>)
 80044e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80044e4:	6823      	ldr	r3, [r4, #0]
 80044e6:	6831      	ldr	r1, [r6, #0]
 80044e8:	061f      	lsls	r7, r3, #24
 80044ea:	f851 5b04 	ldr.w	r5, [r1], #4
 80044ee:	d402      	bmi.n	80044f6 <_printf_i+0x18a>
 80044f0:	065f      	lsls	r7, r3, #25
 80044f2:	bf48      	it	mi
 80044f4:	b2ad      	uxthmi	r5, r5
 80044f6:	6031      	str	r1, [r6, #0]
 80044f8:	07d9      	lsls	r1, r3, #31
 80044fa:	bf44      	itt	mi
 80044fc:	f043 0320 	orrmi.w	r3, r3, #32
 8004500:	6023      	strmi	r3, [r4, #0]
 8004502:	b11d      	cbz	r5, 800450c <_printf_i+0x1a0>
 8004504:	2310      	movs	r3, #16
 8004506:	e7ab      	b.n	8004460 <_printf_i+0xf4>
 8004508:	4826      	ldr	r0, [pc, #152]	@ (80045a4 <_printf_i+0x238>)
 800450a:	e7e9      	b.n	80044e0 <_printf_i+0x174>
 800450c:	6823      	ldr	r3, [r4, #0]
 800450e:	f023 0320 	bic.w	r3, r3, #32
 8004512:	6023      	str	r3, [r4, #0]
 8004514:	e7f6      	b.n	8004504 <_printf_i+0x198>
 8004516:	4616      	mov	r6, r2
 8004518:	e7bd      	b.n	8004496 <_printf_i+0x12a>
 800451a:	6833      	ldr	r3, [r6, #0]
 800451c:	6825      	ldr	r5, [r4, #0]
 800451e:	1d18      	adds	r0, r3, #4
 8004520:	6961      	ldr	r1, [r4, #20]
 8004522:	6030      	str	r0, [r6, #0]
 8004524:	062e      	lsls	r6, r5, #24
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	d501      	bpl.n	800452e <_printf_i+0x1c2>
 800452a:	6019      	str	r1, [r3, #0]
 800452c:	e002      	b.n	8004534 <_printf_i+0x1c8>
 800452e:	0668      	lsls	r0, r5, #25
 8004530:	d5fb      	bpl.n	800452a <_printf_i+0x1be>
 8004532:	8019      	strh	r1, [r3, #0]
 8004534:	2300      	movs	r3, #0
 8004536:	4616      	mov	r6, r2
 8004538:	6123      	str	r3, [r4, #16]
 800453a:	e7bc      	b.n	80044b6 <_printf_i+0x14a>
 800453c:	6833      	ldr	r3, [r6, #0]
 800453e:	2100      	movs	r1, #0
 8004540:	1d1a      	adds	r2, r3, #4
 8004542:	6032      	str	r2, [r6, #0]
 8004544:	681e      	ldr	r6, [r3, #0]
 8004546:	6862      	ldr	r2, [r4, #4]
 8004548:	4630      	mov	r0, r6
 800454a:	f000 f859 	bl	8004600 <memchr>
 800454e:	b108      	cbz	r0, 8004554 <_printf_i+0x1e8>
 8004550:	1b80      	subs	r0, r0, r6
 8004552:	6060      	str	r0, [r4, #4]
 8004554:	6863      	ldr	r3, [r4, #4]
 8004556:	6123      	str	r3, [r4, #16]
 8004558:	2300      	movs	r3, #0
 800455a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800455e:	e7aa      	b.n	80044b6 <_printf_i+0x14a>
 8004560:	4632      	mov	r2, r6
 8004562:	4649      	mov	r1, r9
 8004564:	4640      	mov	r0, r8
 8004566:	6923      	ldr	r3, [r4, #16]
 8004568:	47d0      	blx	sl
 800456a:	3001      	adds	r0, #1
 800456c:	d0ad      	beq.n	80044ca <_printf_i+0x15e>
 800456e:	6823      	ldr	r3, [r4, #0]
 8004570:	079b      	lsls	r3, r3, #30
 8004572:	d413      	bmi.n	800459c <_printf_i+0x230>
 8004574:	68e0      	ldr	r0, [r4, #12]
 8004576:	9b03      	ldr	r3, [sp, #12]
 8004578:	4298      	cmp	r0, r3
 800457a:	bfb8      	it	lt
 800457c:	4618      	movlt	r0, r3
 800457e:	e7a6      	b.n	80044ce <_printf_i+0x162>
 8004580:	2301      	movs	r3, #1
 8004582:	4632      	mov	r2, r6
 8004584:	4649      	mov	r1, r9
 8004586:	4640      	mov	r0, r8
 8004588:	47d0      	blx	sl
 800458a:	3001      	adds	r0, #1
 800458c:	d09d      	beq.n	80044ca <_printf_i+0x15e>
 800458e:	3501      	adds	r5, #1
 8004590:	68e3      	ldr	r3, [r4, #12]
 8004592:	9903      	ldr	r1, [sp, #12]
 8004594:	1a5b      	subs	r3, r3, r1
 8004596:	42ab      	cmp	r3, r5
 8004598:	dcf2      	bgt.n	8004580 <_printf_i+0x214>
 800459a:	e7eb      	b.n	8004574 <_printf_i+0x208>
 800459c:	2500      	movs	r5, #0
 800459e:	f104 0619 	add.w	r6, r4, #25
 80045a2:	e7f5      	b.n	8004590 <_printf_i+0x224>
 80045a4:	0800478f 	.word	0x0800478f
 80045a8:	080047a0 	.word	0x080047a0

080045ac <memmove>:
 80045ac:	4288      	cmp	r0, r1
 80045ae:	b510      	push	{r4, lr}
 80045b0:	eb01 0402 	add.w	r4, r1, r2
 80045b4:	d902      	bls.n	80045bc <memmove+0x10>
 80045b6:	4284      	cmp	r4, r0
 80045b8:	4623      	mov	r3, r4
 80045ba:	d807      	bhi.n	80045cc <memmove+0x20>
 80045bc:	1e43      	subs	r3, r0, #1
 80045be:	42a1      	cmp	r1, r4
 80045c0:	d008      	beq.n	80045d4 <memmove+0x28>
 80045c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80045ca:	e7f8      	b.n	80045be <memmove+0x12>
 80045cc:	4601      	mov	r1, r0
 80045ce:	4402      	add	r2, r0
 80045d0:	428a      	cmp	r2, r1
 80045d2:	d100      	bne.n	80045d6 <memmove+0x2a>
 80045d4:	bd10      	pop	{r4, pc}
 80045d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80045de:	e7f7      	b.n	80045d0 <memmove+0x24>

080045e0 <_sbrk_r>:
 80045e0:	b538      	push	{r3, r4, r5, lr}
 80045e2:	2300      	movs	r3, #0
 80045e4:	4d05      	ldr	r5, [pc, #20]	@ (80045fc <_sbrk_r+0x1c>)
 80045e6:	4604      	mov	r4, r0
 80045e8:	4608      	mov	r0, r1
 80045ea:	602b      	str	r3, [r5, #0]
 80045ec:	f7fc fc40 	bl	8000e70 <_sbrk>
 80045f0:	1c43      	adds	r3, r0, #1
 80045f2:	d102      	bne.n	80045fa <_sbrk_r+0x1a>
 80045f4:	682b      	ldr	r3, [r5, #0]
 80045f6:	b103      	cbz	r3, 80045fa <_sbrk_r+0x1a>
 80045f8:	6023      	str	r3, [r4, #0]
 80045fa:	bd38      	pop	{r3, r4, r5, pc}
 80045fc:	2000032c 	.word	0x2000032c

08004600 <memchr>:
 8004600:	4603      	mov	r3, r0
 8004602:	b510      	push	{r4, lr}
 8004604:	b2c9      	uxtb	r1, r1
 8004606:	4402      	add	r2, r0
 8004608:	4293      	cmp	r3, r2
 800460a:	4618      	mov	r0, r3
 800460c:	d101      	bne.n	8004612 <memchr+0x12>
 800460e:	2000      	movs	r0, #0
 8004610:	e003      	b.n	800461a <memchr+0x1a>
 8004612:	7804      	ldrb	r4, [r0, #0]
 8004614:	3301      	adds	r3, #1
 8004616:	428c      	cmp	r4, r1
 8004618:	d1f6      	bne.n	8004608 <memchr+0x8>
 800461a:	bd10      	pop	{r4, pc}

0800461c <memcpy>:
 800461c:	440a      	add	r2, r1
 800461e:	4291      	cmp	r1, r2
 8004620:	f100 33ff 	add.w	r3, r0, #4294967295
 8004624:	d100      	bne.n	8004628 <memcpy+0xc>
 8004626:	4770      	bx	lr
 8004628:	b510      	push	{r4, lr}
 800462a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800462e:	4291      	cmp	r1, r2
 8004630:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004634:	d1f9      	bne.n	800462a <memcpy+0xe>
 8004636:	bd10      	pop	{r4, pc}

08004638 <_realloc_r>:
 8004638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800463c:	4680      	mov	r8, r0
 800463e:	4615      	mov	r5, r2
 8004640:	460c      	mov	r4, r1
 8004642:	b921      	cbnz	r1, 800464e <_realloc_r+0x16>
 8004644:	4611      	mov	r1, r2
 8004646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800464a:	f7ff bc39 	b.w	8003ec0 <_malloc_r>
 800464e:	b92a      	cbnz	r2, 800465c <_realloc_r+0x24>
 8004650:	f7ff fbcc 	bl	8003dec <_free_r>
 8004654:	2400      	movs	r4, #0
 8004656:	4620      	mov	r0, r4
 8004658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800465c:	f000 f81a 	bl	8004694 <_malloc_usable_size_r>
 8004660:	4285      	cmp	r5, r0
 8004662:	4606      	mov	r6, r0
 8004664:	d802      	bhi.n	800466c <_realloc_r+0x34>
 8004666:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800466a:	d8f4      	bhi.n	8004656 <_realloc_r+0x1e>
 800466c:	4629      	mov	r1, r5
 800466e:	4640      	mov	r0, r8
 8004670:	f7ff fc26 	bl	8003ec0 <_malloc_r>
 8004674:	4607      	mov	r7, r0
 8004676:	2800      	cmp	r0, #0
 8004678:	d0ec      	beq.n	8004654 <_realloc_r+0x1c>
 800467a:	42b5      	cmp	r5, r6
 800467c:	462a      	mov	r2, r5
 800467e:	4621      	mov	r1, r4
 8004680:	bf28      	it	cs
 8004682:	4632      	movcs	r2, r6
 8004684:	f7ff ffca 	bl	800461c <memcpy>
 8004688:	4621      	mov	r1, r4
 800468a:	4640      	mov	r0, r8
 800468c:	f7ff fbae 	bl	8003dec <_free_r>
 8004690:	463c      	mov	r4, r7
 8004692:	e7e0      	b.n	8004656 <_realloc_r+0x1e>

08004694 <_malloc_usable_size_r>:
 8004694:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004698:	1f18      	subs	r0, r3, #4
 800469a:	2b00      	cmp	r3, #0
 800469c:	bfbc      	itt	lt
 800469e:	580b      	ldrlt	r3, [r1, r0]
 80046a0:	18c0      	addlt	r0, r0, r3
 80046a2:	4770      	bx	lr

080046a4 <_init>:
 80046a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046a6:	bf00      	nop
 80046a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046aa:	bc08      	pop	{r3}
 80046ac:	469e      	mov	lr, r3
 80046ae:	4770      	bx	lr

080046b0 <_fini>:
 80046b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b2:	bf00      	nop
 80046b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046b6:	bc08      	pop	{r3}
 80046b8:	469e      	mov	lr, r3
 80046ba:	4770      	bx	lr
